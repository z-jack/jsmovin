"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateBaseTransform = calculateBaseTransform;
exports.getBoundingBox = getBoundingBox;
exports.getLeafNodes = getLeafNodes;
exports.getBaselineHeight = getBaselineHeight;
exports.encodeLineCap = encodeLineCap;
exports.encodeLineJoin = encodeLineJoin;

function calculateBaseTransform(dom, root) {
  // https://github.com/dagrejs/dagre-d3/issues/202
  return root.getScreenCTM().inverse().multiply(dom.getScreenCTM());
}

function getBoundingBox(dom) {
  var svgRoot = dom;

  while (true) {
    if (svgRoot.parentElement instanceof SVGGraphicsElement) {
      svgRoot = svgRoot.parentElement;
    } else {
      break;
    }
  }

  var baseBox = calculateBaseTransform(dom, svgRoot);
  var refBBox = dom.getBBox();
  var coordinate = [baseBox.e + refBBox.x, baseBox.f + refBBox.y, refBBox.width + 1, refBBox.height + 1];
  return coordinate;
}

function getLeafNodes(master) {
  // https://stackoverflow.com/questions/22289391/how-to-create-an-array-of-leaf-nodes-of-an-html-dom-using-javascript
  var nodes = Array.prototype.slice.call(master.getElementsByTagName("*"), 0);
  var leafNodes = nodes.filter(function (elem) {
    if (elem.hasChildNodes()) {
      // see if any of the child nodes are elements
      for (var i = 0; i < elem.childNodes.length; i++) {
        if (elem.childNodes[i].nodeType == 1) {
          // there is a child element, so return false to not include
          // this parent element
          return false;
        }
      }
    }

    return true;
  });
  return leafNodes;
}

function getBaselineHeight(dom) {
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  var computedStyle = getComputedStyle(dom);
  var fontSettings = computedStyle.font;
  ctx.font = fontSettings;
  var textMetrix = ctx.measureText('ypfgjâ–ˆ');
  return textMetrix.actualBoundingBoxDescent || 0;
}

function encodeLineCap(type) {
  switch (type) {
    case 'square':
      return 3;

    case 'butt':
      return 1;

    default:
      return 2;
  }
}

function encodeLineJoin(type) {
  switch (type) {
    case 'miter':
      return 1;

    case 'bevel':
      return 3;

    default:
      return 2;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXIudHMiXSwibmFtZXMiOlsiY2FsY3VsYXRlQmFzZVRyYW5zZm9ybSIsImRvbSIsInJvb3QiLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwibXVsdGlwbHkiLCJnZXRCb3VuZGluZ0JveCIsInN2Z1Jvb3QiLCJwYXJlbnRFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiYmFzZUJveCIsInJlZkJCb3giLCJnZXRCQm94IiwiY29vcmRpbmF0ZSIsImUiLCJ4IiwiZiIsInkiLCJ3aWR0aCIsImhlaWdodCIsImdldExlYWZOb2RlcyIsIm1hc3RlciIsIm5vZGVzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlYWZOb2RlcyIsImZpbHRlciIsImVsZW0iLCJoYXNDaGlsZE5vZGVzIiwiaSIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJub2RlVHlwZSIsImdldEJhc2VsaW5lSGVpZ2h0IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNldHRpbmdzIiwiZm9udCIsInRleHRNZXRyaXgiLCJtZWFzdXJlVGV4dCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCIsImVuY29kZUxpbmVDYXAiLCJ0eXBlIiwiZW5jb2RlTGluZUpvaW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFPLFNBQVNBLHNCQUFULENBQWdDQyxHQUFoQyxFQUF5REMsSUFBekQsRUFBbUY7QUFDdEY7QUFFQSxTQUFPQSxJQUFJLENBQUNDLFlBQUwsR0FBcUJDLE9BQXJCLEdBQStCQyxRQUEvQixDQUF3Q0osR0FBRyxDQUFDRSxZQUFKLEVBQXhDLENBQVA7QUFDSDs7QUFFTSxTQUFTRyxjQUFULENBQXdCTCxHQUF4QixFQUFpRDtBQUNwRCxNQUFJTSxPQUEyQixHQUFHTixHQUFsQzs7QUFDQSxTQUFPLElBQVAsRUFBYTtBQUNULFFBQUlNLE9BQU8sQ0FBQ0MsYUFBUixZQUFpQ0Msa0JBQXJDLEVBQXlEO0FBQ3JERixNQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0MsYUFBbEI7QUFDSCxLQUZELE1BRU87QUFDSDtBQUNIO0FBQ0o7O0FBQ0QsTUFBTUUsT0FBTyxHQUFHVixzQkFBc0IsQ0FBQ0MsR0FBRCxFQUFNTSxPQUFOLENBQXRDO0FBQ0EsTUFBTUksT0FBTyxHQUFHVixHQUFHLENBQUNXLE9BQUosRUFBaEI7QUFDQSxNQUFNQyxVQUE0QyxHQUFHLENBQUNILE9BQU8sQ0FBQ0ksQ0FBUixHQUFZSCxPQUFPLENBQUNJLENBQXJCLEVBQXdCTCxPQUFPLENBQUNNLENBQVIsR0FBWUwsT0FBTyxDQUFDTSxDQUE1QyxFQUErQ04sT0FBTyxDQUFDTyxLQUFSLEdBQWdCLENBQS9ELEVBQWtFUCxPQUFPLENBQUNRLE1BQVIsR0FBaUIsQ0FBbkYsQ0FBckQ7QUFDQSxTQUFPTixVQUFQO0FBQ0g7O0FBRU0sU0FBU08sWUFBVCxDQUFzQkMsTUFBdEIsRUFBa0Q7QUFDckQ7QUFFQSxNQUFJQyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCTCxNQUFNLENBQUNNLG9CQUFQLENBQTRCLEdBQTVCLENBQTNCLEVBQTZELENBQTdELENBQVo7QUFDQSxNQUFJQyxTQUFTLEdBQUdOLEtBQUssQ0FBQ08sTUFBTixDQUFhLFVBQVVDLElBQVYsRUFBZ0I7QUFDekMsUUFBSUEsSUFBSSxDQUFDQyxhQUFMLEVBQUosRUFBMEI7QUFDdEI7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLElBQUksQ0FBQ0csVUFBTCxDQUFnQkMsTUFBcEMsRUFBNENGLENBQUMsRUFBN0MsRUFBaUQ7QUFDN0MsWUFBSUYsSUFBSSxDQUFDRyxVQUFMLENBQWdCRCxDQUFoQixFQUFtQkcsUUFBbkIsSUFBK0IsQ0FBbkMsRUFBc0M7QUFDbEM7QUFDQTtBQUNBLGlCQUFPLEtBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FaZSxDQUFoQjtBQWFBLFNBQU9QLFNBQVA7QUFDSDs7QUFFTSxTQUFTUSxpQkFBVCxDQUEyQm5DLEdBQTNCLEVBQWdEO0FBQ25ELE1BQU1vQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0EsTUFBTUMsR0FBRyxHQUFHSCxNQUFNLENBQUNJLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBWjtBQUNBLE1BQU1DLGFBQWEsR0FBR0MsZ0JBQWdCLENBQUMxQyxHQUFELENBQXRDO0FBQ0EsTUFBTTJDLFlBQVksR0FBR0YsYUFBYSxDQUFDRyxJQUFuQztBQUVBTCxFQUFBQSxHQUFHLENBQUNLLElBQUosR0FBV0QsWUFBWDtBQUNBLE1BQU1FLFVBQVUsR0FBR04sR0FBRyxDQUFDTyxXQUFKLENBQWdCLFFBQWhCLENBQW5CO0FBQ0EsU0FBT0QsVUFBVSxDQUFDRSx3QkFBWCxJQUF1QyxDQUE5QztBQUNIOztBQUVNLFNBQVNDLGFBQVQsQ0FBdUJDLElBQXZCLEVBQXFEO0FBQ3hELFVBQVFBLElBQVI7QUFDSSxTQUFLLFFBQUw7QUFDSSxhQUFPLENBQVA7O0FBQ0osU0FBSyxNQUFMO0FBQ0ksYUFBTyxDQUFQOztBQUNKO0FBQ0ksYUFBTyxDQUFQO0FBTlI7QUFRSDs7QUFFTSxTQUFTQyxjQUFULENBQXdCRCxJQUF4QixFQUFzRDtBQUN6RCxVQUFRQSxJQUFSO0FBQ0ksU0FBSyxPQUFMO0FBQ0ksYUFBTyxDQUFQOztBQUNKLFNBQUssT0FBTDtBQUNJLGFBQU8sQ0FBUDs7QUFDSjtBQUNJLGFBQU8sQ0FBUDtBQU5SO0FBUUgiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybShkb206IFNWR0dyYXBoaWNzRWxlbWVudCwgcm9vdDogU1ZHR3JhcGhpY3NFbGVtZW50KSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2RhZ3JlanMvZGFncmUtZDMvaXNzdWVzLzIwMlxuXG4gICAgcmV0dXJuIHJvb3QuZ2V0U2NyZWVuQ1RNKCkhLmludmVyc2UoKS5tdWx0aXBseShkb20uZ2V0U2NyZWVuQ1RNKCkhKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdCb3goZG9tOiBTVkdHcmFwaGljc0VsZW1lbnQpIHtcbiAgICBsZXQgc3ZnUm9vdDogU1ZHR3JhcGhpY3NFbGVtZW50ID0gZG9tXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKHN2Z1Jvb3QucGFyZW50RWxlbWVudCBpbnN0YW5jZW9mIFNWR0dyYXBoaWNzRWxlbWVudCkge1xuICAgICAgICAgICAgc3ZnUm9vdCA9IHN2Z1Jvb3QucGFyZW50RWxlbWVudFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBiYXNlQm94ID0gY2FsY3VsYXRlQmFzZVRyYW5zZm9ybShkb20sIHN2Z1Jvb3QpXG4gICAgY29uc3QgcmVmQkJveCA9IGRvbS5nZXRCQm94KClcbiAgICBjb25zdCBjb29yZGluYXRlOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSA9IFtiYXNlQm94LmUgKyByZWZCQm94LngsIGJhc2VCb3guZiArIHJlZkJCb3gueSwgcmVmQkJveC53aWR0aCArIDEsIHJlZkJCb3guaGVpZ2h0ICsgMV1cbiAgICByZXR1cm4gY29vcmRpbmF0ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVhZk5vZGVzKG1hc3RlcjogU1ZHR3JhcGhpY3NFbGVtZW50KSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjIyODkzOTEvaG93LXRvLWNyZWF0ZS1hbi1hcnJheS1vZi1sZWFmLW5vZGVzLW9mLWFuLWh0bWwtZG9tLXVzaW5nLWphdmFzY3JpcHRcblxuICAgIHZhciBub2RlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG1hc3Rlci5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIiksIDApO1xuICAgIHZhciBsZWFmTm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgaWYgKGVsZW0uaGFzQ2hpbGROb2RlcygpKSB7XG4gICAgICAgICAgICAvLyBzZWUgaWYgYW55IG9mIHRoZSBjaGlsZCBub2RlcyBhcmUgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW0uY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIGEgY2hpbGQgZWxlbWVudCwgc28gcmV0dXJuIGZhbHNlIHRvIG5vdCBpbmNsdWRlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gbGVhZk5vZGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZWxpbmVIZWlnaHQoZG9tOiBTVkdUZXh0RWxlbWVudCkge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJykhXG4gICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZG9tKVxuICAgIGNvbnN0IGZvbnRTZXR0aW5ncyA9IGNvbXB1dGVkU3R5bGUuZm9udFxuXG4gICAgY3R4LmZvbnQgPSBmb250U2V0dGluZ3NcbiAgICBjb25zdCB0ZXh0TWV0cml4ID0gY3R4Lm1lYXN1cmVUZXh0KCd5cGZnauKWiCcpXG4gICAgcmV0dXJuIHRleHRNZXRyaXguYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50IHx8IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUxpbmVDYXAodHlwZT86IHN0cmluZyB8IG51bGwpOiBudW1iZXIge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgICAgICAgcmV0dXJuIDNcbiAgICAgICAgY2FzZSAnYnV0dCc6XG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDJcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVMaW5lSm9pbih0eXBlPzogc3RyaW5nIHwgbnVsbCk6IG51bWJlciB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ21pdGVyJzpcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIGNhc2UgJ2JldmVsJzpcbiAgICAgICAgICAgIHJldHVybiAzXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gMlxuICAgIH1cbn0iXX0=