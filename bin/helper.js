"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateBaseTransform = calculateBaseTransform;
exports.getBoundingBox = getBoundingBox;
exports.getLeafNodes = getLeafNodes;
exports.getBaselineHeight = getBaselineHeight;

function calculateBaseTransform(dom, root) {
  // https://github.com/dagrejs/dagre-d3/issues/202
  return root.getScreenCTM().inverse().multiply(dom.getScreenCTM());
}

function getBoundingBox(dom) {
  var svgRoot = dom;

  while (true) {
    if (svgRoot.parentElement instanceof SVGGraphicsElement) {
      svgRoot = svgRoot.parentElement;
    } else {
      break;
    }
  }

  var baseBox = calculateBaseTransform(dom, svgRoot);
  var refBBox = dom.getBBox();
  var coordinate = [baseBox.e + refBBox.x, baseBox.f + refBBox.y, refBBox.width + 1, refBBox.height + 1];
  return coordinate;
}

function getLeafNodes(master) {
  // https://stackoverflow.com/questions/22289391/how-to-create-an-array-of-leaf-nodes-of-an-html-dom-using-javascript
  var nodes = Array.prototype.slice.call(master.getElementsByTagName("*"), 0);
  var leafNodes = nodes.filter(function (elem) {
    if (elem.hasChildNodes()) {
      // see if any of the child nodes are elements
      for (var i = 0; i < elem.childNodes.length; i++) {
        if (elem.childNodes[i].nodeType == 1) {
          // there is a child element, so return false to not include
          // this parent element
          return false;
        }
      }
    }

    return true;
  });
  return leafNodes;
}

function getBaselineHeight(dom) {
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  var computedStyle = getComputedStyle(dom);
  var fontSettings = computedStyle.font;
  ctx.font = fontSettings;
  var textMetrix = ctx.measureText('ypfgjâ–ˆ');
  return textMetrix.actualBoundingBoxDescent || 0;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oZWxwZXIudHMiXSwibmFtZXMiOlsiY2FsY3VsYXRlQmFzZVRyYW5zZm9ybSIsImRvbSIsInJvb3QiLCJnZXRTY3JlZW5DVE0iLCJpbnZlcnNlIiwibXVsdGlwbHkiLCJnZXRCb3VuZGluZ0JveCIsInN2Z1Jvb3QiLCJwYXJlbnRFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiYmFzZUJveCIsInJlZkJCb3giLCJnZXRCQm94IiwiY29vcmRpbmF0ZSIsImUiLCJ4IiwiZiIsInkiLCJ3aWR0aCIsImhlaWdodCIsImdldExlYWZOb2RlcyIsIm1hc3RlciIsIm5vZGVzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxlYWZOb2RlcyIsImZpbHRlciIsImVsZW0iLCJoYXNDaGlsZE5vZGVzIiwiaSIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJub2RlVHlwZSIsImdldEJhc2VsaW5lSGVpZ2h0IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImNvbXB1dGVkU3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNldHRpbmdzIiwiZm9udCIsInRleHRNZXRyaXgiLCJtZWFzdXJlVGV4dCIsImFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFPLFNBQVNBLHNCQUFULENBQWdDQyxHQUFoQyxFQUF5REMsSUFBekQsRUFBbUY7QUFDdEY7QUFFQSxTQUFPQSxJQUFJLENBQUNDLFlBQUwsR0FBcUJDLE9BQXJCLEdBQStCQyxRQUEvQixDQUF3Q0osR0FBRyxDQUFDRSxZQUFKLEVBQXhDLENBQVA7QUFDSDs7QUFFTSxTQUFTRyxjQUFULENBQXdCTCxHQUF4QixFQUFpRDtBQUNwRCxNQUFJTSxPQUEyQixHQUFHTixHQUFsQzs7QUFDQSxTQUFPLElBQVAsRUFBYTtBQUNULFFBQUlNLE9BQU8sQ0FBQ0MsYUFBUixZQUFpQ0Msa0JBQXJDLEVBQXlEO0FBQ3JERixNQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0MsYUFBbEI7QUFDSCxLQUZELE1BRU87QUFDSDtBQUNIO0FBQ0o7O0FBQ0QsTUFBTUUsT0FBTyxHQUFHVixzQkFBc0IsQ0FBQ0MsR0FBRCxFQUFNTSxPQUFOLENBQXRDO0FBQ0EsTUFBTUksT0FBTyxHQUFHVixHQUFHLENBQUNXLE9BQUosRUFBaEI7QUFDQSxNQUFNQyxVQUE0QyxHQUFHLENBQUNILE9BQU8sQ0FBQ0ksQ0FBUixHQUFZSCxPQUFPLENBQUNJLENBQXJCLEVBQXdCTCxPQUFPLENBQUNNLENBQVIsR0FBWUwsT0FBTyxDQUFDTSxDQUE1QyxFQUErQ04sT0FBTyxDQUFDTyxLQUFSLEdBQWdCLENBQS9ELEVBQWtFUCxPQUFPLENBQUNRLE1BQVIsR0FBaUIsQ0FBbkYsQ0FBckQ7QUFDQSxTQUFPTixVQUFQO0FBQ0g7O0FBRU0sU0FBU08sWUFBVCxDQUFzQkMsTUFBdEIsRUFBa0Q7QUFDckQ7QUFFQSxNQUFJQyxLQUFLLEdBQUdDLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCTCxNQUFNLENBQUNNLG9CQUFQLENBQTRCLEdBQTVCLENBQTNCLEVBQTZELENBQTdELENBQVo7QUFDQSxNQUFJQyxTQUFTLEdBQUdOLEtBQUssQ0FBQ08sTUFBTixDQUFhLFVBQVVDLElBQVYsRUFBZ0I7QUFDekMsUUFBSUEsSUFBSSxDQUFDQyxhQUFMLEVBQUosRUFBMEI7QUFDdEI7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLElBQUksQ0FBQ0csVUFBTCxDQUFnQkMsTUFBcEMsRUFBNENGLENBQUMsRUFBN0MsRUFBaUQ7QUFDN0MsWUFBSUYsSUFBSSxDQUFDRyxVQUFMLENBQWdCRCxDQUFoQixFQUFtQkcsUUFBbkIsSUFBK0IsQ0FBbkMsRUFBc0M7QUFDbEM7QUFDQTtBQUNBLGlCQUFPLEtBQVA7QUFDSDtBQUNKO0FBQ0o7O0FBQ0QsV0FBTyxJQUFQO0FBQ0gsR0FaZSxDQUFoQjtBQWFBLFNBQU9QLFNBQVA7QUFDSDs7QUFFTSxTQUFTUSxpQkFBVCxDQUEyQm5DLEdBQTNCLEVBQWdEO0FBQ25ELE1BQU1vQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixRQUF2QixDQUFmO0FBQ0EsTUFBTUMsR0FBRyxHQUFHSCxNQUFNLENBQUNJLFVBQVAsQ0FBa0IsSUFBbEIsQ0FBWjtBQUNBLE1BQU1DLGFBQWEsR0FBR0MsZ0JBQWdCLENBQUMxQyxHQUFELENBQXRDO0FBQ0EsTUFBTTJDLFlBQVksR0FBR0YsYUFBYSxDQUFDRyxJQUFuQztBQUVBTCxFQUFBQSxHQUFHLENBQUNLLElBQUosR0FBV0QsWUFBWDtBQUNBLE1BQU1FLFVBQVUsR0FBR04sR0FBRyxDQUFDTyxXQUFKLENBQWdCLFFBQWhCLENBQW5CO0FBQ0EsU0FBT0QsVUFBVSxDQUFDRSx3QkFBWCxJQUF1QyxDQUE5QztBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0oZG9tOiBTVkdHcmFwaGljc0VsZW1lbnQsIHJvb3Q6IFNWR0dyYXBoaWNzRWxlbWVudCkge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYWdyZWpzL2RhZ3JlLWQzL2lzc3Vlcy8yMDJcblxuICAgIHJldHVybiByb290LmdldFNjcmVlbkNUTSgpIS5pbnZlcnNlKCkubXVsdGlwbHkoZG9tLmdldFNjcmVlbkNUTSgpISlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQm94KGRvbTogU1ZHR3JhcGhpY3NFbGVtZW50KSB7XG4gICAgbGV0IHN2Z1Jvb3Q6IFNWR0dyYXBoaWNzRWxlbWVudCA9IGRvbVxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChzdmdSb290LnBhcmVudEVsZW1lbnQgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHN2Z1Jvb3QgPSBzdmdSb290LnBhcmVudEVsZW1lbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYmFzZUJveCA9IGNhbGN1bGF0ZUJhc2VUcmFuc2Zvcm0oZG9tLCBzdmdSb290KVxuICAgIGNvbnN0IHJlZkJCb3ggPSBkb20uZ2V0QkJveCgpXG4gICAgY29uc3QgY29vcmRpbmF0ZTogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPSBbYmFzZUJveC5lICsgcmVmQkJveC54LCBiYXNlQm94LmYgKyByZWZCQm94LnksIHJlZkJCb3gud2lkdGggKyAxLCByZWZCQm94LmhlaWdodCArIDFdXG4gICAgcmV0dXJuIGNvb3JkaW5hdGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExlYWZOb2RlcyhtYXN0ZXI6IFNWR0dyYXBoaWNzRWxlbWVudCkge1xuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyMjg5MzkxL2hvdy10by1jcmVhdGUtYW4tYXJyYXktb2YtbGVhZi1ub2Rlcy1vZi1hbi1odG1sLWRvbS11c2luZy1qYXZhc2NyaXB0XG5cbiAgICB2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChtYXN0ZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLCAwKTtcbiAgICB2YXIgbGVhZk5vZGVzID0gbm9kZXMuZmlsdGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIGlmIChlbGVtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgLy8gc2VlIGlmIGFueSBvZiB0aGUgY2hpbGQgbm9kZXMgYXJlIGVsZW1lbnRzXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0uY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtLmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVyZSBpcyBhIGNoaWxkIGVsZW1lbnQsIHNvIHJldHVybiBmYWxzZSB0byBub3QgaW5jbHVkZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHBhcmVudCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGxlYWZOb2Rlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJhc2VsaW5lSGVpZ2h0KGRvbTogU1ZHVGV4dEVsZW1lbnQpIHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIVxuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvbSlcbiAgICBjb25zdCBmb250U2V0dGluZ3MgPSBjb21wdXRlZFN0eWxlLmZvbnRcblxuICAgIGN0eC5mb250ID0gZm9udFNldHRpbmdzXG4gICAgY29uc3QgdGV4dE1ldHJpeCA9IGN0eC5tZWFzdXJlVGV4dCgneXBmZ2rilognKVxuICAgIHJldHVybiB0ZXh0TWV0cml4LmFjdHVhbEJvdW5kaW5nQm94RGVzY2VudCB8fCAwXG59Il19