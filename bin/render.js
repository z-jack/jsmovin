"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = render;
exports.renderPlainGlyph = renderPlainGlyph;
exports.renderText = renderText;
exports.renderImage = renderImage;

var _path = require("./path");

var _v = _interopRequireDefault(require("uuid/v4"));

var _svgPathParser = require("svg-path-parser");

var _helper = require("./helper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function render(dom, baseDom) {
  if (dom instanceof SVGTextElement || dom instanceof SVGImageElement) {
    return [];
  } else if (dom instanceof SVGGElement) {
    return renderGroup(dom, baseDom);
  } else {
    return renderGlyph(dom, baseDom);
  }
}

function encodeLineCap(type) {
  switch (type) {
    case 'square':
      return 3;

    case 'butt':
      return 1;

    default:
      return 2;
  }
}

function encodeLineJoin(type) {
  switch (type) {
    case 'miter':
      return 1;

    case 'bevel':
      return 3;

    default:
      return 2;
  }
}

function addVisualEncodings(items, styles, dom, baseDom) {
  if (styles.stroke && styles.stroke !== 'none') {
    items.push({
      ty: 'st',
      c: {
        k: styles.stroke.split('(')[1].split(')')[0].split(',').slice(0, 3).map(function (raw) {
          return parseInt(raw) / 255;
        }).concat(1)
      },
      o: {
        k: parseFloat(styles.strokeOpacity || '1') * 100
      },
      w: {
        k: parseFloat(styles.strokeWidth || '1')
      },
      lc: encodeLineCap(styles.strokeLinecap),
      lj: encodeLineJoin(styles.strokeLinejoin)
    });
  }

  if (styles.fill && styles.fill !== 'none') {
    items.push({
      ty: 'fl',
      c: {
        k: styles.fill.split('(')[1].split(')')[0].split(',').slice(0, 3).map(function (raw) {
          return parseInt(raw) / 255;
        }).concat(1)
      },
      o: {
        k: parseFloat(styles.fillOpacity || '1') * 100
      }
    });
  }

  var posX = 0,
      posY = 0;

  if (dom && baseDom) {
    var baseTransform = (0, _helper.calculateBaseTransform)(dom, baseDom);
    var baseBBox = baseDom.getBBox();
    var refBBox = dom.getBBox();
    posX = baseTransform.e + refBBox.x - baseBBox.x;
    posY = baseTransform.f + refBBox.y - baseBBox.y;
  }

  items.push({
    ty: "tr",
    p: {
      k: [posX, posY]
    },
    a: {
      k: [0, 0]
    },
    s: {
      k: [100, 100]
    },
    r: {
      k: 0
    },
    o: {
      k: parseFloat(styles.opacity || '1') * 100
    },
    sk: {
      k: 0
    },
    sa: {
      k: 0
    }
  });
}

function renderGlyph(dom, baseDom) {
  var group = {
    ty: "gr",
    it: [],
    bm: 0,
    hd: false
  };

  var postActions = function postActions(pathMaker) {
    pathMaker.uniform();
    group.it.push({
      ty: 'sh',
      ks: {
        k: pathMaker.path,
        a: 0
      },
      nm: dom.id,
      hd: false
    });
    var styles = window.getComputedStyle(dom);
    addVisualEncodings(group.it, styles, dom, baseDom);
  };

  if (dom instanceof SVGCircleElement) {
    var svgLength = dom.r.baseVal;
    svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
    var r = svgLength.valueInSpecifiedUnits;
    var pathMaker = new _path.PathMaker();
    pathMaker.moveTo(r, 0);
    pathMaker.arcTo(r, r, 0, 1, 0, r, 2 * r);
    pathMaker.arcTo(r, r, 0, 1, 0, r, 0);
    pathMaker.closePath();
    postActions(pathMaker);
  } else if (dom instanceof SVGEllipseElement) {
    var mapKey = ['rx', 'ry'];

    var _mapKey$map = mapKey.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey$map2 = _slicedToArray(_mapKey$map, 2),
        rx = _mapKey$map2[0],
        ry = _mapKey$map2[1];

    var _pathMaker = new _path.PathMaker();

    _pathMaker.moveTo(rx, 0);

    _pathMaker.arcTo(rx, ry, 0, 1, 0, rx, 2 * ry);

    _pathMaker.arcTo(rx, ry, 0, 1, 0, rx, 0);

    _pathMaker.closePath();

    postActions(_pathMaker);
  } else if (dom instanceof SVGLineElement) {
    var _mapKey = ['x1', 'x2', 'y1', 'y2'];

    var _mapKey$map3 = _mapKey.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey$map4 = _slicedToArray(_mapKey$map3, 4),
        x1 = _mapKey$map4[0],
        x2 = _mapKey$map4[1],
        y1 = _mapKey$map4[2],
        y2 = _mapKey$map4[3];

    var offsetX = Math.min(x1, x2);
    var offsetY = Math.min(y1, y2);

    var _pathMaker2 = new _path.PathMaker();

    _pathMaker2.moveTo(x1 - offsetX, y1 - offsetY);

    _pathMaker2.lineTo(x2 - offsetX, y2 - offsetY);

    postActions(_pathMaker2);
  } else if (dom instanceof SVGPathElement) {
    var pathData = dom.getAttribute('d') || '';
    var pathDataSeries = (0, _svgPathParser.parseSVG)(pathData);

    var _pathMaker3 = new _path.PathMaker();

    var pathDataWithType;
    pathDataSeries.forEach(function (pathDataItem) {
      switch (pathDataItem.code) {
        case 'M':
          pathDataWithType = pathDataItem;

          _pathMaker3.moveTo(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'L':
          pathDataWithType = pathDataItem;

          _pathMaker3.lineTo(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'l':
          pathDataWithType = pathDataItem;

          _pathMaker3.lineToRelative(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'H':
          pathDataWithType = pathDataItem;

          _pathMaker3.horizontalTo(pathDataWithType.x);

          break;

        case 'h':
          pathDataWithType = pathDataItem;

          _pathMaker3.horizontalToRelative(pathDataWithType.x);

          break;

        case 'V':
          pathDataWithType = pathDataItem;

          _pathMaker3.verticalTo(pathDataWithType.y);

          break;

        case 'v':
          pathDataWithType = pathDataItem;

          _pathMaker3.verticalToRelative(pathDataWithType.y);

          break;

        case 'C':
          pathDataWithType = pathDataItem;

          _pathMaker3.cubicBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'c':
          pathDataWithType = pathDataItem;

          _pathMaker3.cubicBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'Q':
          pathDataWithType = pathDataItem;

          _pathMaker3.quadraticBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'q':
          pathDataWithType = pathDataItem;

          _pathMaker3.quadraticBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'A':
          pathDataWithType = pathDataItem;

          _pathMaker3.arcTo(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'a':
          pathDataWithType = pathDataItem;

          _pathMaker3.arcToRelative(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'Z':
        case 'z':
          _pathMaker3.closePath();

          break;

        default:
          console.error(pathDataItem);
          throw new Error('No implementation found for this path command.');
      }
    });
    postActions(_pathMaker3);
  } else if (dom instanceof SVGPolygonElement || dom instanceof SVGPolylineElement) {
    var points = dom.points;

    if (points.length) {
      var iterablePoints = Array.prototype.slice.call(points);

      var _offsetX = iterablePoints.reduce(function (p, v) {
        return Math.min(p, v.x);
      }, 0);

      var _offsetY = iterablePoints.reduce(function (p, v) {
        return Math.min(p, v.y);
      }, 0);

      var _pathMaker4 = new _path.PathMaker();

      _pathMaker4.moveTo(points[0].x - _offsetX, points[0].y - _offsetY);

      iterablePoints.forEach(function (v, i) {
        if (i <= 0) return;

        _pathMaker4.lineTo(v.x - _offsetX, v.y - _offsetY);
      });

      if (dom instanceof SVGPolygonElement) {
        _pathMaker4.closePath();
      }

      postActions(_pathMaker4);
    }
  } else if (dom instanceof SVGRectElement) {
    var _mapKey2 = ['width', 'height'];

    var _mapKey2$map = _mapKey2.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey2$map2 = _slicedToArray(_mapKey2$map, 2),
        width = _mapKey2$map2[0],
        height = _mapKey2$map2[1];

    var _pathMaker5 = new _path.PathMaker();

    _pathMaker5.moveTo(0, 0);

    _pathMaker5.lineTo(width, 0);

    _pathMaker5.lineTo(width, height);

    _pathMaker5.lineTo(0, height);

    _pathMaker5.closePath();

    postActions(_pathMaker5);
  } else {
    console.error(dom);
    throw new Error('No implementation found for svg graphics element.');
  }

  return [group];
}

function renderGroup(dom, baseDom) {
  var items = [];
  dom.childNodes.forEach(function (node) {
    if (node instanceof SVGGraphicsElement) {
      items = render(node, baseDom || dom).concat(items);
    }
  });
  return items;
}

function renderPlainGlyph(type, args) {
  var group = {
    ty: "gr",
    it: [{
      ty: 'sh',
      ks: {
        k: null,
        a: 0
      },
      hd: false
    }, {
      ty: 'st',
      c: {
        k: [1, 1, 1, 1]
      },
      w: 1
    }, {
      ty: 'fl',
      c: {
        k: [1, 1, 1, 1]
      },
      o: {
        k: 100
      }
    }, {
      ty: 'tr',
      p: {
        k: [0, 0]
      },
      a: {
        k: [0, 0]
      },
      s: {
        k: [100, 100]
      },
      r: {
        k: 0
      },
      o: {
        k: 100
      },
      sk: {
        k: 0
      },
      sa: {
        k: 0
      }
    }],
    bm: 0,
    hd: false
  };
  var pathMaker = new _path.PathMaker();

  switch (type) {
    case 'rect':
      pathMaker.moveTo(0, 0);
      pathMaker.lineTo(args[0], 0);
      pathMaker.lineTo(args[0], args[1]);
      pathMaker.lineTo(0, args[1]);
      pathMaker.closePath();
      break;

    case 'ellipse':
      pathMaker.moveTo(args[0], 0);
      pathMaker.arcTo(args[0], args[1], 0, 1, 0, args[0], 2 * args[1]);
      pathMaker.arcTo(args[0], args[1], 0, 1, 0, args[0], 0);
      pathMaker.closePath();
  }

  pathMaker.uniform();
  group.it[0].ks.k = pathMaker.path;
  return group;
}

function renderText(dom, fontList) {
  var computedStyle = getComputedStyle(dom);
  var fontSize = parseFloat(computedStyle.fontSize),
      fontFamily = computedStyle.fontFamily.split(',')[0].trim(),
      fontStyle = computedStyle.fontStyle,
      fontWeight = computedStyle.fontWeight,
      fontColor = (computedStyle.color || 'rgb(0,0,0)').split('(')[1].split(')')[0].split(',').map(function (i) {
    return parseInt(i) / 255;
  });
  var fontName = (0, _v["default"])();

  if (fontList) {
    var fontExist = fontList.list.filter(function (font) {
      return font.fFamily == fontFamily && font.fStyle == fontStyle && font.fWeight == fontWeight;
    });
    if (fontExist.length) fontName = fontExist[0].fName;
  }

  var textData = {
    d: {
      k: [{
        t: 0,
        s: {
          s: fontSize,
          f: fontName,
          t: dom.innerHTML,
          j: 0,
          tr: 0,
          ls: 0,
          fc: fontColor
        }
      }]
    },
    p: {},
    m: {
      a: {
        k: [0, 0]
      }
    },
    a: []
  };
  var fontDef = {
    fFamily: fontFamily,
    fWeight: "".concat(fontWeight),
    fStyle: fontStyle,
    fName: fontName
  };
  return [textData, fontDef];
}

function renderImage(dom) {
  var id = (0, _v["default"])();
  var domHeightVal = dom.height.baseVal;
  domHeightVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
  var domWidthVal = dom.width.baseVal;
  domWidthVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  canvas.width = domWidthVal.valueInSpecifiedUnits;
  canvas.height = domHeightVal.valueInSpecifiedUnits;
  ctx.drawImage(dom, 0, 0);
  var dataUrl = canvas.toDataURL();
  var asset = {
    h: domHeightVal.valueInSpecifiedUnits,
    w: domWidthVal.valueInSpecifiedUnits,
    id: (0, _v["default"])(),
    u: dataUrl,
    e: 1
  };
  return [id, asset];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIudHMiXSwibmFtZXMiOlsicmVuZGVyIiwiZG9tIiwiYmFzZURvbSIsIlNWR1RleHRFbGVtZW50IiwiU1ZHSW1hZ2VFbGVtZW50IiwiU1ZHR0VsZW1lbnQiLCJyZW5kZXJHcm91cCIsInJlbmRlckdseXBoIiwiZW5jb2RlTGluZUNhcCIsInR5cGUiLCJlbmNvZGVMaW5lSm9pbiIsImFkZFZpc3VhbEVuY29kaW5ncyIsIml0ZW1zIiwic3R5bGVzIiwic3Ryb2tlIiwicHVzaCIsInR5IiwiYyIsImsiLCJzcGxpdCIsInNsaWNlIiwibWFwIiwicmF3IiwicGFyc2VJbnQiLCJjb25jYXQiLCJvIiwicGFyc2VGbG9hdCIsInN0cm9rZU9wYWNpdHkiLCJ3Iiwic3Ryb2tlV2lkdGgiLCJsYyIsInN0cm9rZUxpbmVjYXAiLCJsaiIsInN0cm9rZUxpbmVqb2luIiwiZmlsbCIsImZpbGxPcGFjaXR5IiwicG9zWCIsInBvc1kiLCJiYXNlVHJhbnNmb3JtIiwiYmFzZUJCb3giLCJnZXRCQm94IiwicmVmQkJveCIsImUiLCJ4IiwiZiIsInkiLCJwIiwiYSIsInMiLCJyIiwib3BhY2l0eSIsInNrIiwic2EiLCJncm91cCIsIml0IiwiYm0iLCJoZCIsInBvc3RBY3Rpb25zIiwicGF0aE1ha2VyIiwidW5pZm9ybSIsImtzIiwicGF0aCIsIm5tIiwiaWQiLCJ3aW5kb3ciLCJnZXRDb21wdXRlZFN0eWxlIiwiU1ZHQ2lyY2xlRWxlbWVudCIsInN2Z0xlbmd0aCIsImJhc2VWYWwiLCJjb252ZXJ0VG9TcGVjaWZpZWRVbml0cyIsIlNWR0xlbmd0aCIsIlNWR19MRU5HVEhUWVBFX1BYIiwidmFsdWVJblNwZWNpZmllZFVuaXRzIiwiUGF0aE1ha2VyIiwibW92ZVRvIiwiYXJjVG8iLCJjbG9zZVBhdGgiLCJTVkdFbGxpcHNlRWxlbWVudCIsIm1hcEtleSIsImtleSIsInJ4IiwicnkiLCJTVkdMaW5lRWxlbWVudCIsIngxIiwieDIiLCJ5MSIsInkyIiwib2Zmc2V0WCIsIk1hdGgiLCJtaW4iLCJvZmZzZXRZIiwibGluZVRvIiwiU1ZHUGF0aEVsZW1lbnQiLCJwYXRoRGF0YSIsImdldEF0dHJpYnV0ZSIsInBhdGhEYXRhU2VyaWVzIiwicGF0aERhdGFXaXRoVHlwZSIsImZvckVhY2giLCJwYXRoRGF0YUl0ZW0iLCJjb2RlIiwibGluZVRvUmVsYXRpdmUiLCJob3Jpem9udGFsVG8iLCJob3Jpem9udGFsVG9SZWxhdGl2ZSIsInZlcnRpY2FsVG8iLCJ2ZXJ0aWNhbFRvUmVsYXRpdmUiLCJjdWJpY0JlemllckN1cnZlVG8iLCJjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZSIsInF1YWRyYXRpY0JlemllckN1cnZlVG8iLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUiLCJ4QXhpc1JvdGF0aW9uIiwibGFyZ2VBcmMiLCJzd2VlcCIsImFyY1RvUmVsYXRpdmUiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsIlNWR1BvbHlnb25FbGVtZW50IiwiU1ZHUG9seWxpbmVFbGVtZW50IiwicG9pbnRzIiwibGVuZ3RoIiwiaXRlcmFibGVQb2ludHMiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiLCJyZWR1Y2UiLCJ2IiwiaSIsIlNWR1JlY3RFbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJjaGlsZE5vZGVzIiwibm9kZSIsIlNWR0dyYXBoaWNzRWxlbWVudCIsInJlbmRlclBsYWluR2x5cGgiLCJhcmdzIiwicmVuZGVyVGV4dCIsImZvbnRMaXN0IiwiY29tcHV0ZWRTdHlsZSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsInRyaW0iLCJmb250U3R5bGUiLCJmb250V2VpZ2h0IiwiZm9udENvbG9yIiwiY29sb3IiLCJmb250TmFtZSIsImZvbnRFeGlzdCIsImxpc3QiLCJmaWx0ZXIiLCJmb250IiwiZkZhbWlseSIsImZTdHlsZSIsImZXZWlnaHQiLCJmTmFtZSIsInRleHREYXRhIiwiZCIsInQiLCJpbm5lckhUTUwiLCJqIiwidHIiLCJscyIsImZjIiwibSIsImZvbnREZWYiLCJyZW5kZXJJbWFnZSIsImRvbUhlaWdodFZhbCIsImRvbVdpZHRoVmFsIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsImRhdGFVcmwiLCJ0b0RhdGFVUkwiLCJhc3NldCIsImgiLCJ1Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUdPLFNBQVNBLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXlDQyxPQUF6QyxFQUFxRjtBQUN4RixNQUFJRCxHQUFHLFlBQVlFLGNBQWYsSUFBaUNGLEdBQUcsWUFBWUcsZUFBcEQsRUFBcUU7QUFDakUsV0FBTyxFQUFQO0FBQ0gsR0FGRCxNQUVPLElBQUlILEdBQUcsWUFBWUksV0FBbkIsRUFBZ0M7QUFDbkMsV0FBT0MsV0FBVyxDQUFDTCxHQUFELEVBQU1DLE9BQU4sQ0FBbEI7QUFDSCxHQUZNLE1BRUE7QUFDSCxXQUFPSyxXQUFXLENBQUNOLEdBQUQsRUFBTUMsT0FBTixDQUFsQjtBQUNIO0FBQ0o7O0FBRUQsU0FBU00sYUFBVCxDQUF1QkMsSUFBdkIsRUFBcUQ7QUFDakQsVUFBUUEsSUFBUjtBQUNJLFNBQUssUUFBTDtBQUNJLGFBQU8sQ0FBUDs7QUFDSixTQUFLLE1BQUw7QUFDSSxhQUFPLENBQVA7O0FBQ0o7QUFDSSxhQUFPLENBQVA7QUFOUjtBQVFIOztBQUVELFNBQVNDLGNBQVQsQ0FBd0JELElBQXhCLEVBQXNEO0FBQ2xELFVBQVFBLElBQVI7QUFDSSxTQUFLLE9BQUw7QUFDSSxhQUFPLENBQVA7O0FBQ0osU0FBSyxPQUFMO0FBQ0ksYUFBTyxDQUFQOztBQUNKO0FBQ0ksYUFBTyxDQUFQO0FBTlI7QUFRSDs7QUFJRCxTQUFTRSxrQkFBVCxDQUE0QkMsS0FBNUIsRUFBc0RDLE1BQXRELEVBQW1GWixHQUFuRixFQUE2R0MsT0FBN0csRUFBMkk7QUFDdkksTUFBSVcsTUFBTSxDQUFDQyxNQUFQLElBQWlCRCxNQUFNLENBQUND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QTNCO0FBQ0ErRixFQUFBQSxNQUFNLENBQUN0QyxNQUFQLEdBQWdCb0MsWUFBWSxDQUFDN0YscUJBQTdCO0FBQ0FrRyxFQUFBQSxHQUFHLENBQUVFLFNBQUwsQ0FBZTNLLEdBQWYsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkI7QUFFQSxNQUFNNEssT0FBTyxHQUFHTixNQUFNLENBQUNPLFNBQVAsRUFBaEI7QUFDQSxNQUFNQyxLQUFLLEdBQUc7QUFDVkMsSUFBQUEsQ0FBQyxFQUFFWCxZQUFZLENBQUM3RixxQkFETjtBQUVWNUMsSUFBQUEsQ0FBQyxFQUFFMEksV0FBVyxDQUFDOUYscUJBRkw7QUFHVlQsSUFBQUEsRUFBRSxFQUFFLG9CQUhNO0FBSVZrSCxJQUFBQSxDQUFDLEVBQUVKLE9BSk87QUFLVm5JLElBQUFBLENBQUMsRUFBRTtBQUxPLEdBQWQ7QUFPQSxTQUFPLENBQUNxQixFQUFELEVBQUtnSCxLQUFMLENBQVA7QUFDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyb3VwU2hhcGUsIFRleHREYXRhLCBSZWZlcmVuY2VJRCwgUGF0aFNoYXBlLCBGaWxsU2hhcGUsIFN0cm9rZVNoYXBlLCBUcmFuc2Zvcm1TaGFwZSwgSW1hZ2VBc3NldCwgRm9udDEsIEZvbnRzIH0gZnJvbSAnLi9hbmltYXRpb24nXG5pbXBvcnQgeyBQYXRoTWFrZXIgfSBmcm9tICcuL3BhdGgnXG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0J1xuaW1wb3J0IHsgcGFyc2VTVkcsIE1vdmVUb0NvbW1hbmQsIExpbmVUb0NvbW1hbmQsIEhvcml6b250YWxMaW5lVG9Db21tYW5kLCBWZXJ0aWNhbExpbmVUb0NvbW1hbmQsIEN1cnZlVG9Db21tYW5kLCBRdWFkcmF0aWNDdXJ2ZVRvQ29tbWFuZCwgRWxsaXB0aWNhbEFyY0NvbW1hbmQgfSBmcm9tICdzdmctcGF0aC1wYXJzZXInXG5pbXBvcnQgeyBjYWxjdWxhdGVCYXNlVHJhbnNmb3JtIH0gZnJvbSAnLi9oZWxwZXInXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihkb206IFNWR0dyYXBoaWNzRWxlbWVudCwgYmFzZURvbT86IFNWR0dyYXBoaWNzRWxlbWVudCk6IEdyb3VwU2hhcGVbXSB7XG4gICAgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1RleHRFbGVtZW50IHx8IGRvbSBpbnN0YW5jZW9mIFNWR0ltYWdlRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0dFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiByZW5kZXJHcm91cChkb20sIGJhc2VEb20pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckdseXBoKGRvbSwgYmFzZURvbSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuY29kZUxpbmVDYXAodHlwZT86IHN0cmluZyB8IG51bGwpOiBudW1iZXIge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdzcXVhcmUnOlxuICAgICAgICAgICAgcmV0dXJuIDNcbiAgICAgICAgY2FzZSAnYnV0dCc6XG4gICAgICAgICAgICByZXR1cm4gMVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDJcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGVuY29kZUxpbmVKb2luKHR5cGU/OiBzdHJpbmcgfCBudWxsKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnbWl0ZXInOlxuICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgY2FzZSAnYmV2ZWwnOlxuICAgICAgICAgICAgcmV0dXJuIDNcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAyXG4gICAgfVxufVxuXG50eXBlIFZpc3VhbEdyb3VwSXRlbSA9IFBhdGhTaGFwZSB8IEZpbGxTaGFwZSB8IFN0cm9rZVNoYXBlIHwgVHJhbnNmb3JtU2hhcGVcblxuZnVuY3Rpb24gYWRkVmlzdWFsRW5jb2RpbmdzKGl0ZW1zOiBWaXN1YWxHcm91cEl0ZW1bXSwgc3R5bGVzOiBDU1NTdHlsZURlY2xhcmF0aW9uLCBkb20/OiBTVkdHcmFwaGljc0VsZW1lbnQsIGJhc2VEb20/OiBTVkdHcmFwaGljc0VsZW1lbnQpIHtcbiAgICBpZiAoc3R5bGVzLnN0cm9rZSAmJiBzdHlsZXMuc3Ryb2tlICE9PSAnbm9uZScpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICB0eTogJ3N0JyxcbiAgICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgICAgICBrOiBzdHlsZXMuc3Ryb2tlIS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoKHJhdzogc3RyaW5nKSA9PiBwYXJzZUludChyYXcpIC8gMjU1KS5jb25jYXQoMSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvOiB7XG4gICAgICAgICAgICAgICAgazogcGFyc2VGbG9hdChzdHlsZXMuc3Ryb2tlT3BhY2l0eSB8fCAnMScpICogMTAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdzoge1xuICAgICAgICAgICAgICAgIGs6IHBhcnNlRmxvYXQoc3R5bGVzLnN0cm9rZVdpZHRoIHx8ICcxJylcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYzogZW5jb2RlTGluZUNhcChzdHlsZXMuc3Ryb2tlTGluZWNhcCksXG4gICAgICAgICAgICBsajogZW5jb2RlTGluZUpvaW4oc3R5bGVzLnN0cm9rZUxpbmVqb2luKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBpZiAoc3R5bGVzLmZpbGwgJiYgc3R5bGVzLmZpbGwgIT09ICdub25lJykge1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIHR5OiAnZmwnLFxuICAgICAgICAgICAgYzoge1xuICAgICAgICAgICAgICAgIGs6IHN0eWxlcy5maWxsIS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5zbGljZSgwLCAzKS5tYXAoKHJhdzogc3RyaW5nKSA9PiBwYXJzZUludChyYXcpIC8gMjU1KS5jb25jYXQoMSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvOiB7XG4gICAgICAgICAgICAgICAgazogcGFyc2VGbG9hdChzdHlsZXMuZmlsbE9wYWNpdHkgfHwgJzEnKSAqIDEwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cbiAgICBsZXQgcG9zWCA9IDAsIHBvc1kgPSAwXG4gICAgaWYgKGRvbSAmJiBiYXNlRG9tKSB7XG4gICAgICAgIGNvbnN0IGJhc2VUcmFuc2Zvcm0gPSBjYWxjdWxhdGVCYXNlVHJhbnNmb3JtKGRvbSwgYmFzZURvbSlcbiAgICAgICAgY29uc3QgYmFzZUJCb3ggPSBiYXNlRG9tLmdldEJCb3goKVxuICAgICAgICBjb25zdCByZWZCQm94ID0gZG9tLmdldEJCb3goKVxuICAgICAgICBwb3NYID0gYmFzZVRyYW5zZm9ybS5lICsgcmVmQkJveC54IC0gYmFzZUJCb3gueFxuICAgICAgICBwb3NZID0gYmFzZVRyYW5zZm9ybS5mICsgcmVmQkJveC55IC0gYmFzZUJCb3gueVxuICAgIH1cbiAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgdHk6IFwidHJcIixcbiAgICAgICAgcDoge1xuICAgICAgICAgICAgazogW1xuICAgICAgICAgICAgICAgIHBvc1gsXG4gICAgICAgICAgICAgICAgcG9zWVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICBhOiB7XG4gICAgICAgICAgICBrOiBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHM6IHtcbiAgICAgICAgICAgIGs6IFtcbiAgICAgICAgICAgICAgICAxMDAsXG4gICAgICAgICAgICAgICAgMTAwXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHI6IHtcbiAgICAgICAgICAgIGs6IDBcbiAgICAgICAgfSxcbiAgICAgICAgbzoge1xuICAgICAgICAgICAgazogcGFyc2VGbG9hdChzdHlsZXMub3BhY2l0eSB8fCAnMScpICogMTAwXG4gICAgICAgIH0sXG4gICAgICAgIHNrOiB7XG4gICAgICAgICAgICBrOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHNhOiB7XG4gICAgICAgICAgICBrOiAwXG4gICAgICAgIH1cbiAgICB9KVxuXG59XG5cbmZ1bmN0aW9uIHJlbmRlckdseXBoKGRvbTogU1ZHR3JhcGhpY3NFbGVtZW50LCBiYXNlRG9tPzogU1ZHR3JhcGhpY3NFbGVtZW50KTogR3JvdXBTaGFwZVtdIHtcbiAgICBjb25zdCBncm91cDogR3JvdXBTaGFwZSA9IHtcbiAgICAgICAgdHk6IFwiZ3JcIixcbiAgICAgICAgaXQ6IFtdLFxuICAgICAgICBibTogMCxcbiAgICAgICAgaGQ6IGZhbHNlXG4gICAgfVxuICAgIGNvbnN0IHBvc3RBY3Rpb25zID0gKHBhdGhNYWtlcjogUGF0aE1ha2VyKSA9PiB7XG4gICAgICAgIHBhdGhNYWtlci51bmlmb3JtKClcbiAgICAgICAgZ3JvdXAuaXQhLnB1c2goe1xuICAgICAgICAgICAgdHk6ICdzaCcsXG4gICAgICAgICAgICBrczoge1xuICAgICAgICAgICAgICAgIGs6IHBhdGhNYWtlci5wYXRoLFxuICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBubTogZG9tLmlkLFxuICAgICAgICAgICAgaGQ6IGZhbHNlXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvbSlcbiAgICAgICAgYWRkVmlzdWFsRW5jb2RpbmdzKGdyb3VwLml0ISBhcyBWaXN1YWxHcm91cEl0ZW1bXSwgc3R5bGVzLCBkb20sIGJhc2VEb20pXG4gICAgfVxuICAgIGlmIChkb20gaW5zdGFuY2VvZiBTVkdDaXJjbGVFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHN2Z0xlbmd0aCA9IGRvbS5yLmJhc2VWYWxcbiAgICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICAgICAgY29uc3QgciA9IHN2Z0xlbmd0aC52YWx1ZUluU3BlY2lmaWVkVW5pdHNcbiAgICAgICAgY29uc3QgcGF0aE1ha2VyID0gbmV3IFBhdGhNYWtlcigpXG4gICAgICAgIHBhdGhNYWtlci5tb3ZlVG8ociwgMClcbiAgICAgICAgcGF0aE1ha2VyLmFyY1RvKHIsIHIsIDAsIDEsIDAsIHIsIDIgKiByKVxuICAgICAgICBwYXRoTWFrZXIuYXJjVG8ociwgciwgMCwgMSwgMCwgciwgMClcbiAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXG4gICAgICAgIHBvc3RBY3Rpb25zKHBhdGhNYWtlcilcbiAgICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0VsbGlwc2VFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEtleTogKCdyeCcgfCAncnknKVtdID0gWydyeCcsICdyeSddXG4gICAgICAgIGNvbnN0IFtyeCwgcnldID0gbWFwS2V5Lm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbFxuICAgICAgICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICAgICAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHBhdGhNYWtlciA9IG5ldyBQYXRoTWFrZXIoKVxuICAgICAgICBwYXRoTWFrZXIubW92ZVRvKHJ4LCAwKVxuICAgICAgICBwYXRoTWFrZXIuYXJjVG8ocngsIHJ5LCAwLCAxLCAwLCByeCwgMiAqIHJ5KVxuICAgICAgICBwYXRoTWFrZXIuYXJjVG8ocngsIHJ5LCAwLCAxLCAwLCByeCwgMClcbiAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXG4gICAgICAgIHBvc3RBY3Rpb25zKHBhdGhNYWtlcilcbiAgICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0xpbmVFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEtleTogKCd4MScgfCAneDInIHwgJ3kxJyB8ICd5MicpW10gPSBbJ3gxJywgJ3gyJywgJ3kxJywgJ3kyJ11cbiAgICAgICAgY29uc3QgW3gxLCB4MiwgeTEsIHkyXSA9IG1hcEtleS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN2Z0xlbmd0aCA9IGRvbVtrZXldLmJhc2VWYWxcbiAgICAgICAgICAgIHN2Z0xlbmd0aC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpXG4gICAgICAgICAgICByZXR1cm4gc3ZnTGVuZ3RoLnZhbHVlSW5TcGVjaWZpZWRVbml0c1xuICAgICAgICB9KVxuICAgICAgICBjb25zdCBvZmZzZXRYID0gTWF0aC5taW4oeDEsIHgyKVxuICAgICAgICBjb25zdCBvZmZzZXRZID0gTWF0aC5taW4oeTEsIHkyKVxuICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcbiAgICAgICAgcGF0aE1ha2VyLm1vdmVUbyh4MSAtIG9mZnNldFgsIHkxIC0gb2Zmc2V0WSlcbiAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyh4MiAtIG9mZnNldFgsIHkyIC0gb2Zmc2V0WSlcbiAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHUGF0aEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgcGF0aERhdGEgPSBkb20uZ2V0QXR0cmlidXRlKCdkJykgfHwgJydcbiAgICAgICAgY29uc3QgcGF0aERhdGFTZXJpZXMgPSBwYXJzZVNWRyhwYXRoRGF0YSlcbiAgICAgICAgY29uc3QgcGF0aE1ha2VyID0gbmV3IFBhdGhNYWtlcigpXG4gICAgICAgIGxldCBwYXRoRGF0YVdpdGhUeXBlO1xuICAgICAgICBwYXRoRGF0YVNlcmllcy5mb3JFYWNoKHBhdGhEYXRhSXRlbSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhdGhEYXRhSXRlbS5jb2RlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgTW92ZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIubW92ZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIExpbmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyhwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBMaW5lVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5saW5lVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBIb3Jpem9udGFsTGluZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuaG9yaXpvbnRhbFRvKHBhdGhEYXRhV2l0aFR5cGUueClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBIb3Jpem9udGFsTGluZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuaG9yaXpvbnRhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIFZlcnRpY2FsTGluZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIudmVydGljYWxUbyhwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgVmVydGljYWxMaW5lVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci52ZXJ0aWNhbFRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEN1cnZlVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jdWJpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54MiwgcGF0aERhdGFXaXRoVHlwZS55MiwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgQ3VydmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIFF1YWRyYXRpY0N1cnZlVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIFF1YWRyYXRpY0N1cnZlVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgRWxsaXB0aWNhbEFyY0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmFyY1RvKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEVsbGlwdGljYWxBcmNDb21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5hcmNUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUucngsIHBhdGhEYXRhV2l0aFR5cGUucnksIHBhdGhEYXRhV2l0aFR5cGUueEF4aXNSb3RhdGlvbiwgfn5wYXRoRGF0YVdpdGhUeXBlLmxhcmdlQXJjLCB+fnBhdGhEYXRhV2l0aFR5cGUuc3dlZXAsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuY2xvc2VQYXRoKClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHBhdGhEYXRhSXRlbSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgdGhpcyBwYXRoIGNvbW1hbmQuJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHUG9seWdvbkVsZW1lbnQgfHwgZG9tIGluc3RhbmNlb2YgU1ZHUG9seWxpbmVFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGRvbS5wb2ludHNcbiAgICAgICAgaWYgKHBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZXJhYmxlUG9pbnRzOiBET01Qb2ludFtdID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocG9pbnRzKVxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IGl0ZXJhYmxlUG9pbnRzLnJlZHVjZSgocCwgdikgPT4gTWF0aC5taW4ocCwgdi54KSwgMClcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFkgPSBpdGVyYWJsZVBvaW50cy5yZWR1Y2UoKHAsIHYpID0+IE1hdGgubWluKHAsIHYueSksIDApXG4gICAgICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcbiAgICAgICAgICAgIHBhdGhNYWtlci5tb3ZlVG8ocG9pbnRzWzBdLnggLSBvZmZzZXRYLCBwb2ludHNbMF0ueSAtIG9mZnNldFkpXG4gICAgICAgICAgICBpdGVyYWJsZVBvaW50cy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPD0gMCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyh2LnggLSBvZmZzZXRYLCB2LnkgLSBvZmZzZXRZKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChkb20gaW5zdGFuY2VvZiBTVkdQb2x5Z29uRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdSZWN0RWxlbWVudCkge1xuICAgICAgICBjb25zdCBtYXBLZXk6ICgnd2lkdGgnIHwgJ2hlaWdodCcpW10gPSBbJ3dpZHRoJywgJ2hlaWdodCddXG4gICAgICAgIGNvbnN0IFt3aWR0aCwgaGVpZ2h0XSA9IG1hcEtleS5tYXAoa2V5ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN2Z0xlbmd0aCA9IGRvbVtrZXldLmJhc2VWYWxcbiAgICAgICAgICAgIHN2Z0xlbmd0aC5jb252ZXJ0VG9TcGVjaWZpZWRVbml0cyhTVkdMZW5ndGguU1ZHX0xFTkdUSFRZUEVfUFgpXG4gICAgICAgICAgICByZXR1cm4gc3ZnTGVuZ3RoLnZhbHVlSW5TcGVjaWZpZWRVbml0c1xuICAgICAgICB9KVxuICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcbiAgICAgICAgcGF0aE1ha2VyLm1vdmVUbygwLCAwKVxuICAgICAgICBwYXRoTWFrZXIubGluZVRvKHdpZHRoLCAwKVxuICAgICAgICBwYXRoTWFrZXIubGluZVRvKHdpZHRoLCBoZWlnaHQpXG4gICAgICAgIHBhdGhNYWtlci5saW5lVG8oMCwgaGVpZ2h0KVxuICAgICAgICBwYXRoTWFrZXIuY2xvc2VQYXRoKClcbiAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZG9tKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciBzdmcgZ3JhcGhpY3MgZWxlbWVudC4nKVxuICAgIH1cbiAgICByZXR1cm4gW2dyb3VwXVxufVxuXG5mdW5jdGlvbiByZW5kZXJHcm91cChkb206IFNWR0dFbGVtZW50LCBiYXNlRG9tPzogU1ZHR3JhcGhpY3NFbGVtZW50KTogR3JvdXBTaGFwZVtdIHtcbiAgICBsZXQgaXRlbXM6IEdyb3VwU2hhcGVbXSA9IFtdXG4gICAgZG9tLmNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBTVkdHcmFwaGljc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gcmVuZGVyKG5vZGUsIGJhc2VEb20gfHwgZG9tKS5jb25jYXQoaXRlbXMpXG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBpdGVtc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyUGxhaW5HbHlwaCh0eXBlOiAncmVjdCcgfCAnZWxsaXBzZScsIGFyZ3M6IG51bWJlcltdKTogR3JvdXBTaGFwZSB7XG4gICAgY29uc3QgZ3JvdXA6IEdyb3VwU2hhcGUgPSB7XG4gICAgICAgIHR5OiBcImdyXCIsXG4gICAgICAgIGl0OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHk6ICdzaCcsXG4gICAgICAgICAgICAgICAga3M6IHtcbiAgICAgICAgICAgICAgICAgICAgazogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGQ6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5OiAnc3QnLFxuICAgICAgICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgICAgICAgICAgazogWzEsIDEsIDEsIDFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB3OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5OiAnZmwnLFxuICAgICAgICAgICAgICAgIGM6IHtcbiAgICAgICAgICAgICAgICAgICAgazogWzEsIDEsIDEsIDFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvOiB7XG4gICAgICAgICAgICAgICAgICAgIGs6IDEwMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHk6ICd0cicsXG4gICAgICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICAgICAgICBrOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgIGs6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgICAgICAgazogW1xuICAgICAgICAgICAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgMTAwXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgazogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbzoge1xuICAgICAgICAgICAgICAgICAgICBrOiAxMDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNrOiB7XG4gICAgICAgICAgICAgICAgICAgIGs6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNhOiB7XG4gICAgICAgICAgICAgICAgICAgIGs6IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGJtOiAwLFxuICAgICAgICBoZDogZmFsc2VcbiAgICB9XG4gICAgY29uc3QgcGF0aE1ha2VyID0gbmV3IFBhdGhNYWtlcigpXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ3JlY3QnOlxuICAgICAgICAgICAgcGF0aE1ha2VyLm1vdmVUbygwLCAwKVxuICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyhhcmdzWzBdLCAwKVxuICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbyhhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUbygwLCBhcmdzWzFdKVxuICAgICAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdlbGxpcHNlJzpcbiAgICAgICAgICAgIHBhdGhNYWtlci5tb3ZlVG8oYXJnc1swXSwgMClcbiAgICAgICAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAyICogYXJnc1sxXSlcbiAgICAgICAgICAgIHBhdGhNYWtlci5hcmNUbyhhcmdzWzBdLCBhcmdzWzFdLCAwLCAxLCAwLCBhcmdzWzBdLCAwKVxuICAgICAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXG4gICAgfVxuICAgIHBhdGhNYWtlci51bmlmb3JtKCk7XG4gICAgKGdyb3VwLml0IVswXSBhcyBQYXRoU2hhcGUpLmtzIS5rID0gcGF0aE1ha2VyLnBhdGhcbiAgICByZXR1cm4gZ3JvdXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRleHQoZG9tOiBTVkdUZXh0RWxlbWVudCwgZm9udExpc3Q/OiBGb250cyk6IFtUZXh0RGF0YSwgRm9udDFdIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkb20pXG4gICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZm9udFNpemUpLFxuICAgICAgICBmb250RmFtaWx5ID0gY29tcHV0ZWRTdHlsZS5mb250RmFtaWx5LnNwbGl0KCcsJylbMF0udHJpbSgpLFxuICAgICAgICBmb250U3R5bGUgPSBjb21wdXRlZFN0eWxlLmZvbnRTdHlsZSxcbiAgICAgICAgZm9udFdlaWdodCA9IGNvbXB1dGVkU3R5bGUuZm9udFdlaWdodCxcbiAgICAgICAgZm9udENvbG9yID0gKGNvbXB1dGVkU3R5bGUuY29sb3IgfHwgJ3JnYigwLDAsMCknKS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKS5tYXAoaSA9PiBwYXJzZUludChpKSAvIDI1NSlcbiAgICBsZXQgZm9udE5hbWUgPSB1dWlkKClcbiAgICBpZiAoZm9udExpc3QpIHtcbiAgICAgICAgY29uc3QgZm9udEV4aXN0ID0gZm9udExpc3QubGlzdCEuZmlsdGVyKGZvbnQgPT4gZm9udC5mRmFtaWx5ID09IGZvbnRGYW1pbHkgJiYgZm9udC5mU3R5bGUgPT0gZm9udFN0eWxlICYmIGZvbnQuZldlaWdodCA9PSBmb250V2VpZ2h0KVxuICAgICAgICBpZiAoZm9udEV4aXN0Lmxlbmd0aClcbiAgICAgICAgICAgIGZvbnROYW1lID0gZm9udEV4aXN0WzBdLmZOYW1lIVxuICAgIH1cbiAgICBjb25zdCB0ZXh0RGF0YTogVGV4dERhdGEgPSB7XG4gICAgICAgIGQ6IHtcbiAgICAgICAgICAgIGs6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6IGZvbnRTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgZjogZm9udE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0OiBkb20uaW5uZXJIVE1MLFxuICAgICAgICAgICAgICAgICAgICAgICAgajogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbHM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYzogZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHA6IHt9LFxuICAgICAgICBtOiB7XG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgazogW1xuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhOiBbXVxuICAgIH1cbiAgICBjb25zdCBmb250RGVmOiBGb250MSA9IHtcbiAgICAgICAgZkZhbWlseTogZm9udEZhbWlseSxcbiAgICAgICAgZldlaWdodDogYCR7Zm9udFdlaWdodH1gLFxuICAgICAgICBmU3R5bGU6IGZvbnRTdHlsZSxcbiAgICAgICAgZk5hbWU6IGZvbnROYW1lXG4gICAgfVxuICAgIHJldHVybiBbdGV4dERhdGEsIGZvbnREZWZdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJJbWFnZShkb206IFNWR0ltYWdlRWxlbWVudCk6IFtSZWZlcmVuY2VJRCwgSW1hZ2VBc3NldF0ge1xuICAgIGNvbnN0IGlkID0gdXVpZCgpXG4gICAgY29uc3QgZG9tSGVpZ2h0VmFsID0gZG9tLmhlaWdodC5iYXNlVmFsXG4gICAgZG9tSGVpZ2h0VmFsLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICBjb25zdCBkb21XaWR0aFZhbCA9IGRvbS53aWR0aC5iYXNlVmFsXG4gICAgZG9tV2lkdGhWYWwuY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKVxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuICAgIGNhbnZhcy53aWR0aCA9IGRvbVdpZHRoVmFsLnZhbHVlSW5TcGVjaWZpZWRVbml0c1xuICAgIGNhbnZhcy5oZWlnaHQgPSBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzXG4gICAgY3R4IS5kcmF3SW1hZ2UoZG9tLCAwLCAwKVxuXG4gICAgY29uc3QgZGF0YVVybCA9IGNhbnZhcy50b0RhdGFVUkwoKVxuICAgIGNvbnN0IGFzc2V0ID0ge1xuICAgICAgICBoOiBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxuICAgICAgICB3OiBkb21XaWR0aFZhbC52YWx1ZUluU3BlY2lmaWVkVW5pdHMsXG4gICAgICAgIGlkOiB1dWlkKCksXG4gICAgICAgIHU6IGRhdGFVcmwsXG4gICAgICAgIGU6IDFcbiAgICB9XG4gICAgcmV0dXJuIFtpZCwgYXNzZXRdXG59Il19