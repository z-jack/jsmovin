"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathMaker = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PathMaker =
/*#__PURE__*/
function () {
  function PathMaker() {
    _classCallCheck(this, PathMaker);

    _defineProperty(this, "path", {
      c: false,
      i: [],
      o: [],
      v: []
    });

    _defineProperty(this, "currentX", 0);

    _defineProperty(this, "currentY", 0);

    _defineProperty(this, "offsetX", Infinity);

    _defineProperty(this, "offsetY", Infinity);
  }

  _createClass(PathMaker, [{
    key: "updateXY",
    value: function updateXY(x, y) {
      this.currentX = x;
      this.currentY = y;
      this.offsetX = Math.min(this.offsetX, x);
      this.offsetY = Math.min(this.offsetY, x);
    }
  }, {
    key: "calculateBezierMinMax",
    value: function calculateBezierMinMax(p0, p1, p2, p3) {
      var a = 3 * (p3 - 3 * p2 + 3 * p1 - p0);
      var b = 2 * (3 * p2 - 6 * p1 + 3 * p0);
      var c = 3 * p1;
      var min = Infinity,
          max = -Infinity;

      if (b * b - 4 * a * c >= 0) {
        var sqrt = Math.sqrt(b * b - 4 * a * c);
        var roots = [1, -1].map(function (multi) {
          return (multi * sqrt - b) / 2 / a;
        });
        roots.forEach(function (root) {
          if (root > 0 && root < 1) {
            var value = Math.pow(1 - root, 3) * p0 + 3 * Math.pow(1 - root, 2) * root * p1 + 3 * (1 - root) * root * root * p2 + Math.pow(root, 3) * p3;
            min = Math.min(min, value);
            max = Math.max(max, value);
          }
        });
      }

      min = Math.min(min, p0, p3);
      max = Math.max(max, p0, p3);
      return [min, max];
    }
  }, {
    key: "moveTo",
    value: function moveTo(x, y) {
      this.path.c = false;
      this.path.i = [[0, 0]];
      this.path.o = [];
      this.path.v = [[x, y]];
      this.currentX = x;
      this.currentY = y;
      this.offsetX = x;
      this.offsetY = y;
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      this.path.i.push([0, 0]);
      this.path.o.push([0, 0]);
      this.path.v.push([x, y]);
      this.updateXY(x, y);
    }
  }, {
    key: "lineToRelative",
    value: function lineToRelative(x, y) {
      this.lineTo(this.currentX + x, this.currentY + y);
    }
  }, {
    key: "horizontalTo",
    value: function horizontalTo(x) {
      this.lineTo(x, this.currentY);
    }
  }, {
    key: "horizontalToRelative",
    value: function horizontalToRelative(x) {
      this.horizontalTo(this.currentX + x);
    }
  }, {
    key: "verticalTo",
    value: function verticalTo(y) {
      this.lineTo(this.currentX, y);
    }
  }, {
    key: "verticalToRelative",
    value: function verticalToRelative(y) {
      this.verticalTo(this.currentY + y);
    }
  }, {
    key: "cubicBezierCurveTo",
    value: function cubicBezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
      this.path.i.push([c2x - x, c2y - y]);
      this.path.o.push([c1x - this.currentX, c1y - this.currentY]);
      this.path.v.push([x, y]);
      this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, c1x, c2x, x))));
      this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, c1y, c2y, y))));
      this.updateXY(x, y);
    }
  }, {
    key: "cubicBezierCurveToRelative",
    value: function cubicBezierCurveToRelative(c1x, c1y, c2x, c2y, x, y) {
      this.cubicBezierCurveTo(this.currentX + c1x, this.currentY + c1y, this.currentX + c2x, this.currentY + c2y, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "quadraticBezierCurveTo",
    value: function quadraticBezierCurveTo(cx, cy, x, y) {
      this.path.i.push([cx - x, cy - y]);
      this.path.o.push([cx - this.currentX, cy - this.currentY]);
      this.path.v.push([x, y]);
      this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, cx, cx, x))));
      this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, cy, cy, y))));
      this.updateXY(x, y);
    }
  }, {
    key: "quadraticBezierCurveToRelative",
    value: function quadraticBezierCurveToRelative(cx, cy, x, y) {
      this.quadraticBezierCurveTo(this.currentX + cx, this.currentY + cy, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "arcTo",
    value: function arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {
      var cSeries = PathMaker.a2c(this.currentX, this.currentY, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y);

      while (cSeries.length >= 6) {
        var iovList = cSeries.splice(0, 6);
        this.path.i.push([iovList[2] - iovList[4], iovList[3] - iovList[5]]);
        this.path.o.push([iovList[0] - this.currentX, iovList[1] - this.currentY]);
        this.path.v.push([iovList[4], iovList[5]]);
        this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, iovList[0], iovList[2], iovList[4]))));
        this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, iovList[1], iovList[3], iovList[5]))));
        this.updateXY(iovList[4], iovList[5]);
      }
    }
  }, {
    key: "arcToRelative",
    value: function arcToRelative(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {
      this.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      this.path.c = true;
    }
  }, {
    key: "uniform",
    value: function uniform() {
      while (this.path.o.length < this.path.i.length) {
        this.path.o.push([0, 0]);
      }
    }
  }], [{
    key: "a2c",
    value: function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
      // for more information of where this Math came from visit:
      // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
      var _120 = Math.PI * 120 / 180,
          rad = Math.PI / 180 * (+angle || 0),
          res = [],
          xy,
          rotate = function rotate(x, y, rad) {
        var X = x * Math.cos(rad) - y * Math.sin(rad),
            Y = x * Math.sin(rad) + y * Math.cos(rad);
        return {
          x: X,
          y: Y
        };
      };

      if (!rx || !ry) {
        return [x1, y1, x2, y2, x2, y2];
      }

      if (!recursive) {
        xy = rotate(x1, y1, -rad);
        x1 = xy.x;
        y1 = xy.y;
        xy = rotate(x2, y2, -rad);
        x2 = xy.x;
        y2 = xy.y;
        var cos = Math.cos(Math.PI / 180 * angle),
            sin = Math.sin(Math.PI / 180 * angle),
            x = (x1 - x2) / 2,
            y = (y1 - y2) / 2;
        var h = x * x / (rx * rx) + y * y / (ry * ry);

        if (h > 1) {
          h = Math.sqrt(h);
          rx = h * rx;
          ry = h * ry;
        }

        var rx2 = rx * rx,
            ry2 = ry * ry,
            k = (large_arc_flag == sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
            cx = k * rx * y / ry + (x1 + x2) / 2,
            cy = k * -ry * x / rx + (y1 + y2) / 2,
            f1 = Math.asin((y1 - cy) / ry),
            f2 = Math.asin((y2 - cy) / ry);
        f1 = x1 < cx ? Math.PI - f1 : f1;
        f2 = x2 < cx ? Math.PI - f2 : f2;
        f1 < 0 && (f1 = Math.PI * 2 + f1);
        f2 < 0 && (f2 = Math.PI * 2 + f2);

        if (sweep_flag && f1 > f2) {
          f1 = f1 - Math.PI * 2;
        }

        if (!sweep_flag && f2 > f1) {
          f2 = f2 - Math.PI * 2;
        }
      } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
      }

      var df = f2 - f1;

      if (Math.abs(df) > _120) {
        var f2old = f2,
            x2old = x2,
            y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * Math.cos(f2);
        y2 = cy + ry * Math.sin(f2);
        res = this.a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
      }

      df = f2 - f1;
      var c1 = Math.cos(f1),
          s1 = Math.sin(f1),
          c2 = Math.cos(f2),
          s2 = Math.sin(f2),
          t = Math.tan(df / 4),
          hx = 4 / 3 * rx * t,
          hy = 4 / 3 * ry * t,
          m1 = [x1, y1],
          m2 = [x1 + hx * s1, y1 - hy * c1],
          m3 = [x2 + hx * s2, y2 - hy * c2],
          m4 = [x2, y2];
      m2[0] = 2 * m1[0] - m2[0];
      m2[1] = 2 * m1[1] - m2[1];

      if (recursive) {
        return [m2, m3, m4].concat(res);
      } else {
        res = [m2, m3, m4].concat(res).join().split(",").map(function (x) {
          return parseFloat(x);
        });
        var newres = [];

        for (var i = 0, ii = res.length; i < ii; i++) {
          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
        }

        return newres;
      }
    }
  }]);

  return PathMaker;
}();

exports.PathMaker = PathMaker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRoLnRzIl0sIm5hbWVzIjpbIlBhdGhNYWtlciIsImMiLCJpIiwibyIsInYiLCJJbmZpbml0eSIsIngiLCJ5IiwiY3VycmVudFgiLCJjdXJyZW50WSIsIm9mZnNldFgiLCJNYXRoIiwibWluIiwib2Zmc2V0WSIsInAwIiwicDEiLCJwMiIsInAzIiwiYSIsImIiLCJtYXgiLCJzcXJ0Iiwicm9vdHMiLCJtYXAiLCJtdWx0aSIsImZvckVhY2giLCJyb290IiwidmFsdWUiLCJwb3ciLCJwYXRoIiwicHVzaCIsInVwZGF0ZVhZIiwibGluZVRvIiwiaG9yaXpvbnRhbFRvIiwidmVydGljYWxUbyIsImMxeCIsImMxeSIsImMyeCIsImMyeSIsImNhbGN1bGF0ZUJlemllck1pbk1heCIsImN1YmljQmV6aWVyQ3VydmVUbyIsImN4IiwiY3kiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvIiwicngiLCJyeSIsInhBeGlzUm90YXRpb24iLCJsYXJnZUFyY0ZsYWciLCJzd2VlcEZsYWciLCJjU2VyaWVzIiwiYTJjIiwibGVuZ3RoIiwiaW92TGlzdCIsInNwbGljZSIsImFyY1RvIiwieDEiLCJ5MSIsImFuZ2xlIiwibGFyZ2VfYXJjX2ZsYWciLCJzd2VlcF9mbGFnIiwieDIiLCJ5MiIsInJlY3Vyc2l2ZSIsIl8xMjAiLCJQSSIsInJhZCIsInJlcyIsInh5Iiwicm90YXRlIiwiWCIsImNvcyIsInNpbiIsIlkiLCJoIiwicngyIiwicnkyIiwiayIsImFicyIsImYxIiwiYXNpbiIsImYyIiwiZGYiLCJmMm9sZCIsIngyb2xkIiwieTJvbGQiLCJjMSIsInMxIiwiYzIiLCJzMiIsInQiLCJ0YW4iLCJoeCIsImh5IiwibTEiLCJtMiIsIm0zIiwibTQiLCJjb25jYXQiLCJqb2luIiwic3BsaXQiLCJwYXJzZUZsb2F0IiwibmV3cmVzIiwiaWkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBRWFBLFM7Ozs7OztrQ0FDYztBQUNuQkMsTUFBQUEsQ0FB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RyxDQUFDLEVBQTFDLEVBQThDO0FBQzFDbUcsVUFBQUEsTUFBTSxDQUFDbkcsQ0FBRCxDQUFOLEdBQVlBLENBQUMsR0FBRyxDQUFKLEdBQVFrRSxNQUFNLENBQUNGLEdBQUcsQ0FBQ2hFLENBQUMsR0FBRyxDQUFMLENBQUosRUFBYWdFLEdBQUcsQ0FBQ2hFLENBQUQsQ0FBaEIsRUFBcUIrRCxHQUFyQixDQUFOLENBQWdDMUQsQ0FBeEMsR0FBNEM2RCxNQUFNLENBQUNGLEdBQUcsQ0FBQ2hFLENBQUQsQ0FBSixFQUFTZ0UsR0FBRyxDQUFDaEUsQ0FBQyxHQUFHLENBQUwsQ0FBWixFQUFxQitELEdBQXJCLENBQU4sQ0FBZ0MzRCxDQUF4RjtBQUNIOztBQUNELGVBQU8rRixNQUFQO0FBQ0g7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhEZWYgfSBmcm9tICcuL2FuaW1hdGlvbidcblxuZXhwb3J0IGNsYXNzIFBhdGhNYWtlciB7XG4gICAgcHVibGljIHBhdGg6IFBhdGhEZWYgPSB7XG4gICAgICAgIGM6IGZhbHNlLFxuICAgICAgICBpOiBbXSxcbiAgICAgICAgbzogW10sXG4gICAgICAgIHY6IFtdXG4gICAgfTtcblxuICAgIHByaXZhdGUgY3VycmVudFg6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBjdXJyZW50WTogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIG9mZnNldFg6IG51bWJlciA9IEluZmluaXR5O1xuICAgIHByaXZhdGUgb2Zmc2V0WTogbnVtYmVyID0gSW5maW5pdHk7XG5cbiAgICBwcml2YXRlIHVwZGF0ZVhZKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFggPSB4XG4gICAgICAgIHRoaXMuY3VycmVudFkgPSB5XG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluKHRoaXMub2Zmc2V0WCwgeClcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCB4KVxuICAgIH1cblxuICAgIHByaXZhdGUgY2FsY3VsYXRlQmV6aWVyTWluTWF4KHAwOiBudW1iZXIsIHAxOiBudW1iZXIsIHAyOiBudW1iZXIsIHAzOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAgICAgY29uc3QgYSA9IDMgKiAocDMgLSAzICogcDIgKyAzICogcDEgLSBwMClcbiAgICAgICAgY29uc3QgYiA9IDIgKiAoMyAqIHAyIC0gNiAqIHAxICsgMyAqIHAwKVxuICAgICAgICBjb25zdCBjID0gMyAqIHAxXG4gICAgICAgIGxldCBtaW4gPSBJbmZpbml0eSwgbWF4ID0gLUluZmluaXR5XG4gICAgICAgIGlmIChiICogYiAtIDQgKiBhICogYyA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBzcXJ0ID0gTWF0aC5zcXJ0KGIgKiBiIC0gNCAqIGEgKiBjKVxuICAgICAgICAgICAgY29uc3Qgcm9vdHMgPSBbMSwgLTFdLm1hcChtdWx0aSA9PiAobXVsdGkgKiBzcXJ0IC0gYikgLyAyIC8gYSlcbiAgICAgICAgICAgIHJvb3RzLmZvckVhY2gocm9vdCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJvb3QgPiAwICYmIHJvb3QgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5wb3coMSAtIHJvb3QsIDMpICogcDAgKyAzICogTWF0aC5wb3coMSAtIHJvb3QsIDIpICogcm9vdCAqIHAxICsgMyAqICgxIC0gcm9vdCkgKiByb290ICogcm9vdCAqIHAyICsgTWF0aC5wb3cocm9vdCwgMykgKiBwM1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBwMCwgcDMpXG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgcDAsIHAzKVxuICAgICAgICByZXR1cm4gW21pbiwgbWF4XVxuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wYXRoLmMgPSBmYWxzZVxuICAgICAgICB0aGlzLnBhdGguaSA9IFtbMCwgMF1dXG4gICAgICAgIHRoaXMucGF0aC5vID0gW11cbiAgICAgICAgdGhpcy5wYXRoLnYgPSBbW3gsIHldXVxuICAgICAgICB0aGlzLmN1cnJlbnRYID0geFxuICAgICAgICB0aGlzLmN1cnJlbnRZID0geVxuICAgICAgICB0aGlzLm9mZnNldFggPSB4XG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IHlcbiAgICB9XG4gICAgcHVibGljIGxpbmVUbyh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhdGguaSEucHVzaChbMCwgMF0pXG4gICAgICAgIHRoaXMucGF0aC5vIS5wdXNoKFswLCAwXSlcbiAgICAgICAgdGhpcy5wYXRoLnYhLnB1c2goW3gsIHldKVxuICAgICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpXG4gICAgfVxuICAgIHB1YmxpYyBsaW5lVG9SZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLmxpbmVUbyh0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXG4gICAgfVxuICAgIHB1YmxpYyBob3Jpem9udGFsVG8oeDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMubGluZVRvKHgsIHRoaXMuY3VycmVudFkpXG4gICAgfVxuICAgIHB1YmxpYyBob3Jpem9udGFsVG9SZWxhdGl2ZSh4OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsVG8odGhpcy5jdXJyZW50WCArIHgpXG4gICAgfVxuICAgIHB1YmxpYyB2ZXJ0aWNhbFRvKHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLmxpbmVUbyh0aGlzLmN1cnJlbnRYLCB5KVxuICAgIH1cbiAgICBwdWJsaWMgdmVydGljYWxUb1JlbGF0aXZlKHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnZlcnRpY2FsVG8odGhpcy5jdXJyZW50WSArIHkpXG4gICAgfVxuICAgIHB1YmxpYyBjdWJpY0JlemllckN1cnZlVG8oXG4gICAgICAgIGMxeDogbnVtYmVyLFxuICAgICAgICBjMXk6IG51bWJlcixcbiAgICAgICAgYzJ4OiBudW1iZXIsXG4gICAgICAgIGMyeTogbnVtYmVyLFxuICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgIHk6IG51bWJlclxuICAgICkge1xuICAgICAgICB0aGlzLnBhdGguaSEucHVzaChbYzJ4IC0geCwgYzJ5IC0geV0pXG4gICAgICAgIHRoaXMucGF0aC5vIS5wdXNoKFtjMXggLSB0aGlzLmN1cnJlbnRYLCBjMXkgLSB0aGlzLmN1cnJlbnRZXSlcbiAgICAgICAgdGhpcy5wYXRoLnYhLnB1c2goW3gsIHldKVxuICAgICAgICB0aGlzLm9mZnNldFggPSBNYXRoLm1pbih0aGlzLm9mZnNldFgsIC4uLnRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFgsIGMxeCwgYzJ4LCB4KSlcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBjMXksIGMyeSwgeSkpXG4gICAgICAgIHRoaXMudXBkYXRlWFkoeCwgeSlcbiAgICB9XG4gICAgcHVibGljIGN1YmljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKFxuICAgICAgICBjMXg6IG51bWJlcixcbiAgICAgICAgYzF5OiBudW1iZXIsXG4gICAgICAgIGMyeDogbnVtYmVyLFxuICAgICAgICBjMnk6IG51bWJlcixcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5jdWJpY0JlemllckN1cnZlVG8odGhpcy5jdXJyZW50WCArIGMxeCwgdGhpcy5jdXJyZW50WSArIGMxeSwgdGhpcy5jdXJyZW50WCArIGMyeCwgdGhpcy5jdXJyZW50WSArIGMyeSwgdGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KVxuICAgIH1cbiAgICBwdWJsaWMgcXVhZHJhdGljQmV6aWVyQ3VydmVUbyhjeDogbnVtYmVyLCBjeTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBhdGguaSEucHVzaChbY3ggLSB4LCBjeSAtIHldKVxuICAgICAgICB0aGlzLnBhdGgubyEucHVzaChbY3ggLSB0aGlzLmN1cnJlbnRYLCBjeSAtIHRoaXMuY3VycmVudFldKVxuICAgICAgICB0aGlzLnBhdGgudiEucHVzaChbeCwgeV0pXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluKHRoaXMub2Zmc2V0WCwgLi4udGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WCwgY3gsIGN4LCB4KSlcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBjeSwgY3ksIHkpKVxuICAgICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpXG4gICAgfVxuICAgIHB1YmxpYyBxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUoY3g6IG51bWJlciwgY3k6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHRoaXMuY3VycmVudFggKyBjeCwgdGhpcy5jdXJyZW50WSArIGN5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXG4gICAgfVxuICAgIHB1YmxpYyBhcmNUbyhcbiAgICAgICAgcng6IG51bWJlcixcbiAgICAgICAgcnk6IG51bWJlcixcbiAgICAgICAgeEF4aXNSb3RhdGlvbjogbnVtYmVyLFxuICAgICAgICBsYXJnZUFyY0ZsYWc6IG51bWJlcixcbiAgICAgICAgc3dlZXBGbGFnOiBudW1iZXIsXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGNTZXJpZXMgPSBQYXRoTWFrZXIuYTJjKHRoaXMuY3VycmVudFgsIHRoaXMuY3VycmVudFksIHJ4LCByeSwgeEF4aXNSb3RhdGlvbiwgbGFyZ2VBcmNGbGFnLCBzd2VlcEZsYWcsIHgsIHkpIGFzIG51bWJlcltdXG4gICAgICAgIHdoaWxlIChjU2VyaWVzLmxlbmd0aCA+PSA2KSB7XG4gICAgICAgICAgICBjb25zdCBpb3ZMaXN0ID0gY1Nlcmllcy5zcGxpY2UoMCwgNilcbiAgICAgICAgICAgIHRoaXMucGF0aC5pIS5wdXNoKFtpb3ZMaXN0WzJdIC0gaW92TGlzdFs0XSwgaW92TGlzdFszXSAtIGlvdkxpc3RbNV1dKVxuICAgICAgICAgICAgdGhpcy5wYXRoLm8hLnB1c2goW2lvdkxpc3RbMF0gLSB0aGlzLmN1cnJlbnRYLCBpb3ZMaXN0WzFdIC0gdGhpcy5jdXJyZW50WV0pXG4gICAgICAgICAgICB0aGlzLnBhdGgudiEucHVzaChbaW92TGlzdFs0XSwgaW92TGlzdFs1XV0pXG4gICAgICAgICAgICB0aGlzLm9mZnNldFggPSBNYXRoLm1pbih0aGlzLm9mZnNldFgsIC4uLnRoaXMuY2FsY3VsYXRlQmV6aWVyTWluTWF4KHRoaXMuY3VycmVudFgsIGlvdkxpc3RbMF0sIGlvdkxpc3RbMl0sIGlvdkxpc3RbNF0pKVxuICAgICAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBpb3ZMaXN0WzFdLCBpb3ZMaXN0WzNdLCBpb3ZMaXN0WzVdKSlcbiAgICAgICAgICAgIHRoaXMudXBkYXRlWFkoaW92TGlzdFs0XSwgaW92TGlzdFs1XSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgYXJjVG9SZWxhdGl2ZShcbiAgICAgICAgcng6IG51bWJlcixcbiAgICAgICAgcnk6IG51bWJlcixcbiAgICAgICAgeEF4aXNSb3RhdGlvbjogbnVtYmVyLFxuICAgICAgICBsYXJnZUFyY0ZsYWc6IG51bWJlcixcbiAgICAgICAgc3dlZXBGbGFnOiBudW1iZXIsXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYXJjVG8ocngsIHJ5LCB4QXhpc1JvdGF0aW9uLCBsYXJnZUFyY0ZsYWcsIHN3ZWVwRmxhZywgdGhpcy5jdXJyZW50WCArIHgsIHRoaXMuY3VycmVudFkgKyB5KVxuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGEyYyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCByeDogbnVtYmVyLCByeTogbnVtYmVyLCBhbmdsZTogbnVtYmVyLCBsYXJnZV9hcmNfZmxhZzogbnVtYmVyLCBzd2VlcF9mbGFnOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIHJlY3Vyc2l2ZT86IG51bWJlcltdKTogbnVtYmVyW10gfCBudW1iZXJbXVtdIHtcbiAgICAgICAgLy8gZm9yIG1vcmUgaW5mb3JtYXRpb24gb2Ygd2hlcmUgdGhpcyBNYXRoIGNhbWUgZnJvbSB2aXNpdDpcbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXG4gICAgICAgIHZhciBfMTIwID0gTWF0aC5QSSAqIDEyMCAvIDE4MCxcbiAgICAgICAgICAgIHJhZCA9IE1hdGguUEkgLyAxODAgKiAoK2FuZ2xlIHx8IDApLFxuICAgICAgICAgICAgcmVzOiBudW1iZXJbXSA9IFtdLFxuICAgICAgICAgICAgeHksXG4gICAgICAgICAgICByb3RhdGUgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIFggPSB4ICogTWF0aC5jb3MocmFkKSAtIHkgKiBNYXRoLnNpbihyYWQpLFxuICAgICAgICAgICAgICAgICAgICBZID0geCAqIE1hdGguc2luKHJhZCkgKyB5ICogTWF0aC5jb3MocmFkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4OiBYLCB5OiBZIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICBpZiAoIXJ4IHx8ICFyeSkge1xuICAgICAgICAgICAgcmV0dXJuIFt4MSwgeTEsIHgyLCB5MiwgeDIsIHkyXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgeHkgPSByb3RhdGUoeDEsIHkxLCAtcmFkKTtcbiAgICAgICAgICAgIHgxID0geHkueDtcbiAgICAgICAgICAgIHkxID0geHkueTtcbiAgICAgICAgICAgIHh5ID0gcm90YXRlKHgyLCB5MiwgLXJhZCk7XG4gICAgICAgICAgICB4MiA9IHh5Lng7XG4gICAgICAgICAgICB5MiA9IHh5Lnk7XG4gICAgICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoTWF0aC5QSSAvIDE4MCAqIGFuZ2xlKSxcbiAgICAgICAgICAgICAgICBzaW4gPSBNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogYW5nbGUpLFxuICAgICAgICAgICAgICAgIHggPSAoeDEgLSB4MikgLyAyLFxuICAgICAgICAgICAgICAgIHkgPSAoeTEgLSB5MikgLyAyO1xuICAgICAgICAgICAgdmFyIGggPSB4ICogeCAvIChyeCAqIHJ4KSArIHkgKiB5IC8gKHJ5ICogcnkpO1xuICAgICAgICAgICAgaWYgKGggPiAxKSB7XG4gICAgICAgICAgICAgICAgaCA9IE1hdGguc3FydChoKTtcbiAgICAgICAgICAgICAgICByeCA9IGggKiByeDtcbiAgICAgICAgICAgICAgICByeSA9IGggKiByeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByeDIgPSByeCAqIHJ4LFxuICAgICAgICAgICAgICAgIHJ5MiA9IHJ5ICogcnksXG4gICAgICAgICAgICAgICAgayA9IChsYXJnZV9hcmNfZmxhZyA9PSBzd2VlcF9mbGFnID8gLTEgOiAxKSAqXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc3FydChNYXRoLmFicygocngyICogcnkyIC0gcngyICogeSAqIHkgLSByeTIgKiB4ICogeCkgLyAocngyICogeSAqIHkgKyByeTIgKiB4ICogeCkpKSxcbiAgICAgICAgICAgICAgICBjeCA9IGsgKiByeCAqIHkgLyByeSArICh4MSArIHgyKSAvIDIsXG4gICAgICAgICAgICAgICAgY3kgPSBrICogLXJ5ICogeCAvIHJ4ICsgKHkxICsgeTIpIC8gMixcbiAgICAgICAgICAgICAgICBmMSA9IE1hdGguYXNpbigoeTEgLSBjeSkgLyByeSksXG4gICAgICAgICAgICAgICAgZjIgPSBNYXRoLmFzaW4oKHkyIC0gY3kpIC8gcnkpO1xuXG4gICAgICAgICAgICBmMSA9IHgxIDwgY3ggPyBNYXRoLlBJIC0gZjEgOiBmMTtcbiAgICAgICAgICAgIGYyID0geDIgPCBjeCA/IE1hdGguUEkgLSBmMiA6IGYyO1xuICAgICAgICAgICAgZjEgPCAwICYmIChmMSA9IE1hdGguUEkgKiAyICsgZjEpO1xuICAgICAgICAgICAgZjIgPCAwICYmIChmMiA9IE1hdGguUEkgKiAyICsgZjIpO1xuICAgICAgICAgICAgaWYgKHN3ZWVwX2ZsYWcgJiYgZjEgPiBmMikge1xuICAgICAgICAgICAgICAgIGYxID0gZjEgLSBNYXRoLlBJICogMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3dlZXBfZmxhZyAmJiBmMiA+IGYxKSB7XG4gICAgICAgICAgICAgICAgZjIgPSBmMiAtIE1hdGguUEkgKiAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZjEgPSByZWN1cnNpdmVbMF07XG4gICAgICAgICAgICBmMiA9IHJlY3Vyc2l2ZVsxXTtcbiAgICAgICAgICAgIGN4ID0gcmVjdXJzaXZlWzJdO1xuICAgICAgICAgICAgY3kgPSByZWN1cnNpdmVbM107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRmID0gZjIgLSBmMTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRmKSA+IF8xMjApIHtcbiAgICAgICAgICAgIHZhciBmMm9sZCA9IGYyLFxuICAgICAgICAgICAgICAgIHgyb2xkID0geDIsXG4gICAgICAgICAgICAgICAgeTJvbGQgPSB5MjtcbiAgICAgICAgICAgIGYyID0gZjEgKyBfMTIwICogKHN3ZWVwX2ZsYWcgJiYgZjIgPiBmMSA/IDEgOiAtMSk7XG4gICAgICAgICAgICB4MiA9IGN4ICsgcnggKiBNYXRoLmNvcyhmMik7XG4gICAgICAgICAgICB5MiA9IGN5ICsgcnkgKiBNYXRoLnNpbihmMik7XG4gICAgICAgICAgICByZXMgPSB0aGlzLmEyYyh4MiwgeTIsIHJ4LCByeSwgYW5nbGUsIDAsIHN3ZWVwX2ZsYWcsIHgyb2xkLCB5Mm9sZCwgW2YyLCBmMm9sZCwgY3gsIGN5XSkgYXMgbnVtYmVyW107XG4gICAgICAgIH1cbiAgICAgICAgZGYgPSBmMiAtIGYxO1xuICAgICAgICB2YXIgYzEgPSBNYXRoLmNvcyhmMSksXG4gICAgICAgICAgICBzMSA9IE1hdGguc2luKGYxKSxcbiAgICAgICAgICAgIGMyID0gTWF0aC5jb3MoZjIpLFxuICAgICAgICAgICAgczIgPSBNYXRoLnNpbihmMiksXG4gICAgICAgICAgICB0ID0gTWF0aC50YW4oZGYgLyA0KSxcbiAgICAgICAgICAgIGh4ID0gNCAvIDMgKiByeCAqIHQsXG4gICAgICAgICAgICBoeSA9IDQgLyAzICogcnkgKiB0LFxuICAgICAgICAgICAgbTEgPSBbeDEsIHkxXSxcbiAgICAgICAgICAgIG0yID0gW3gxICsgaHggKiBzMSwgeTEgLSBoeSAqIGMxXSxcbiAgICAgICAgICAgIG0zID0gW3gyICsgaHggKiBzMiwgeTIgLSBoeSAqIGMyXSxcbiAgICAgICAgICAgIG00ID0gW3gyLCB5Ml07XG4gICAgICAgIG0yWzBdID0gMiAqIG0xWzBdIC0gbTJbMF07XG4gICAgICAgIG0yWzFdID0gMiAqIG0xWzFdIC0gbTJbMV07XG4gICAgICAgIGlmIChyZWN1cnNpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBbbTIsIG0zLCBtNF0uY29uY2F0KHJlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBbbTIsIG0zLCBtNF0uY29uY2F0KHJlcykuam9pbigpLnNwbGl0KFwiLFwiKS5tYXAoeCA9PiBwYXJzZUZsb2F0KHgpKTtcbiAgICAgICAgICAgIHZhciBuZXdyZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3cmVzW2ldID0gaSAlIDIgPyByb3RhdGUocmVzW2kgLSAxXSwgcmVzW2ldLCByYWQpLnkgOiByb3RhdGUocmVzW2ldLCByZXNbaSArIDFdLCByYWQpLng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3cmVzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlUGF0aCgpIHtcbiAgICAgICAgdGhpcy5wYXRoLmMgPSB0cnVlXG4gICAgfVxuXG4gICAgcHVibGljIHVuaWZvcm0oKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLnBhdGgubyEubGVuZ3RoIDwgdGhpcy5wYXRoLmkhLmxlbmd0aClcbiAgICAgICAgICAgIHRoaXMucGF0aC5vIS5wdXNoKFswLCAwXSlcbiAgICB9XG59Il19