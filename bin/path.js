"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PathMaker = void 0;

var _svgPathParser = require("svg-path-parser");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PathMaker =
/*#__PURE__*/
function () {
  // for discontinuous paths
  function PathMaker(pathData) {
    _classCallCheck(this, PathMaker);

    _defineProperty(this, "path", {
      c: false,
      i: [],
      o: [],
      v: []
    });

    _defineProperty(this, "currentX", 0);

    _defineProperty(this, "currentY", 0);

    _defineProperty(this, "offsetX", Infinity);

    _defineProperty(this, "offsetY", Infinity);

    _defineProperty(this, "pathReady", false);

    _defineProperty(this, "pathStart", [0, 0]);

    _defineProperty(this, "pathChain", []);

    if (pathData) {
      this.parse(pathData);
    }
  }

  _createClass(PathMaker, [{
    key: "updateXY",
    value: function updateXY(x, y) {
      this.currentX = x;
      this.currentY = y;
      this.offsetX = Math.min(this.offsetX, x);
      this.offsetY = Math.min(this.offsetY, y);
    }
  }, {
    key: "calculateBezierMinMax",
    value: function calculateBezierMinMax(p0, p1, p2, p3) {
      var a = 3 * (p3 - 3 * p2 + 3 * p1 - p0);
      var b = 6 * (p2 - 2 * p1 + p0);
      var c = 3 * (p1 - p0);
      var min = Infinity,
          max = -Infinity;

      if (b * b - 4 * a * c >= 0) {
        var sqrt = Math.sqrt(b * b - 4 * a * c);
        var roots = [1, -1].map(function (multi) {
          return (multi * sqrt - b) / 2 / a;
        });
        roots.forEach(function (root) {
          if (root > 0 && root < 1) {
            var value = Math.pow(1 - root, 3) * p0 + 3 * Math.pow(1 - root, 2) * root * p1 + 3 * (1 - root) * root * root * p2 + Math.pow(root, 3) * p3;
            min = Math.min(min, value);
            max = Math.max(max, value);
          }
        });
      }

      min = Math.min(min, p0, p3);
      max = Math.max(max, p0, p3);
      return [min, max];
    }
  }, {
    key: "moveTo",
    value: function moveTo(x, y) {
      if (!this.pathReady) {
        this.path.c = false;
        this.path.i = [[0, 0]];
        this.path.o = [];
        this.path.v = [[x, y]];
        this.currentX = x;
        this.currentY = y;
        this.offsetX = x;
        this.offsetY = y;
        this.pathReady = true;
      } else {
        this.lineTo.apply(this, _toConsumableArray(this.pathStart));
        this.lineTo(x, y);
        this.pathChain.push(this.pathStart);
      }

      this.pathStart = [x, y];
    }
  }, {
    key: "moveToRelative",
    value: function moveToRelative(x, y) {
      this.moveTo(this.currentX + x, this.currentY + y);
    }
  }, {
    key: "lineTo",
    value: function lineTo(x, y) {
      this.path.i.push([0, 0]);
      this.path.o.push([0, 0]);
      this.path.v.push([x, y]);
      this.updateXY(x, y);
    }
  }, {
    key: "lineToRelative",
    value: function lineToRelative(x, y) {
      this.lineTo(this.currentX + x, this.currentY + y);
    }
  }, {
    key: "horizontalTo",
    value: function horizontalTo(x) {
      this.lineTo(x, this.currentY);
    }
  }, {
    key: "horizontalToRelative",
    value: function horizontalToRelative(x) {
      this.horizontalTo(this.currentX + x);
    }
  }, {
    key: "verticalTo",
    value: function verticalTo(y) {
      this.lineTo(this.currentX, y);
    }
  }, {
    key: "verticalToRelative",
    value: function verticalToRelative(y) {
      this.verticalTo(this.currentY + y);
    }
  }, {
    key: "cubicBezierCurveTo",
    value: function cubicBezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
      this.path.i.push([c2x - x, c2y - y]);
      this.path.o.push([c1x - this.currentX, c1y - this.currentY]);
      this.path.v.push([x, y]);
      this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, c1x, c2x, x))));
      this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, c1y, c2y, y))));
      this.updateXY(x, y);
    }
  }, {
    key: "cubicBezierCurveToRelative",
    value: function cubicBezierCurveToRelative(c1x, c1y, c2x, c2y, x, y) {
      this.cubicBezierCurveTo(this.currentX + c1x, this.currentY + c1y, this.currentX + c2x, this.currentY + c2y, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "quadraticBezierCurveTo",
    value: function quadraticBezierCurveTo(cx, cy, x, y) {
      this.path.i.push([cx - x, cy - y]);
      this.path.o.push([cx - this.currentX, cy - this.currentY]);
      this.path.v.push([x, y]);
      this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, cx, cx, x))));
      this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, cy, cy, y))));
      this.updateXY(x, y);
    }
  }, {
    key: "quadraticBezierCurveToRelative",
    value: function quadraticBezierCurveToRelative(cx, cy, x, y) {
      this.quadraticBezierCurveTo(this.currentX + cx, this.currentY + cy, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "arcTo",
    value: function arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {
      var cSeries = PathMaker.a2c(this.currentX, this.currentY, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y);

      while (cSeries.length >= 6) {
        var iovList = cSeries.splice(0, 6);
        this.path.i.push([iovList[2] - iovList[4], iovList[3] - iovList[5]]);
        this.path.o.push([iovList[0] - this.currentX, iovList[1] - this.currentY]);
        this.path.v.push([iovList[4], iovList[5]]);
        this.offsetX = Math.min.apply(Math, [this.offsetX].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentX, iovList[0], iovList[2], iovList[4]))));
        this.offsetY = Math.min.apply(Math, [this.offsetY].concat(_toConsumableArray(this.calculateBezierMinMax(this.currentY, iovList[1], iovList[3], iovList[5]))));
        this.updateXY(iovList[4], iovList[5]);
      }
    }
  }, {
    key: "arcToRelative",
    value: function arcToRelative(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y) {
      this.arcTo(rx, ry, xAxisRotation, largeArcFlag, sweepFlag, this.currentX + x, this.currentY + y);
    }
  }, {
    key: "closePath",
    value: function closePath() {
      this.path.c = true;
    }
  }, {
    key: "uniform",
    value: function uniform() {
      var _this = this;

      if (this.pathChain.length && !(this.currentX == this.pathStart[0] && this.currentY == this.pathStart[1])) {
        this.lineTo.apply(this, _toConsumableArray(this.pathStart));
      }

      while (this.pathChain.length) {
        var pathRef = this.pathChain.pop();
        this.lineTo.apply(this, _toConsumableArray(pathRef));
      }

      while (this.path.o.length < this.path.i.length) {
        this.path.o.push([0, 0]);
      }

      this.path.v.forEach(function (value) {
        value[0] -= _this.offsetX;
        value[1] -= _this.offsetY;
      });
      this.offsetX = 0;
      this.offsetY = 0;
    }
  }, {
    key: "parse",
    value: function parse(pathData) {
      var _this2 = this;

      var pathDataSeries = (0, _svgPathParser.parseSVG)(pathData);
      var pathDataWithType;
      pathDataSeries.forEach(function (pathDataItem) {
        switch (pathDataItem.code) {
          case 'M':
            pathDataWithType = pathDataItem;

            _this2.moveTo(pathDataWithType.x, pathDataWithType.y);

            break;

          case 'm':
            pathDataWithType = pathDataItem;

            _this2.moveToRelative(pathDataWithType.x, pathDataWithType.y);

          case 'L':
            pathDataWithType = pathDataItem;

            _this2.lineTo(pathDataWithType.x, pathDataWithType.y);

            break;

          case 'l':
            pathDataWithType = pathDataItem;

            _this2.lineToRelative(pathDataWithType.x, pathDataWithType.y);

            break;

          case 'H':
            pathDataWithType = pathDataItem;

            _this2.horizontalTo(pathDataWithType.x);

            break;

          case 'h':
            pathDataWithType = pathDataItem;

            _this2.horizontalToRelative(pathDataWithType.x);

            break;

          case 'V':
            pathDataWithType = pathDataItem;

            _this2.verticalTo(pathDataWithType.y);

            break;

          case 'v':
            pathDataWithType = pathDataItem;

            _this2.verticalToRelative(pathDataWithType.y);

            break;

          case 'C':
            pathDataWithType = pathDataItem;

            _this2.cubicBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'c':
            pathDataWithType = pathDataItem;

            _this2.cubicBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'Q':
            pathDataWithType = pathDataItem;

            _this2.quadraticBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'q':
            pathDataWithType = pathDataItem;

            _this2.quadraticBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'A':
            pathDataWithType = pathDataItem;

            _this2.arcTo(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'a':
            pathDataWithType = pathDataItem;

            _this2.arcToRelative(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

            break;

          case 'Z':
          case 'z':
            _this2.closePath();

            break;

          default:
            console.error(pathDataItem);
            throw new Error('No implementation found for this path command.');
        }
      });
    }
  }, {
    key: "upsample",
    value: function upsample(ratio) {
      // use De Casteljau's algorithm to do the upsampling
      // Reference: https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm
      if (!Number.isInteger(ratio)) {
        throw new Error('The upsampling ratio should be an integer.');
      }

      if (ratio <= 1) return;
      this.uniform();
      var copyPath = {
        c: this.path.c,
        i: [],
        o: [],
        v: []
      };
    }
  }], [{
    key: "a2c",
    value: function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
      // for more information of where this Math came from visit:
      // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
      var _120 = Math.PI * 120 / 180,
          rad = Math.PI / 180 * (+angle || 0),
          res = [],
          xy,
          rotate = function rotate(x, y, rad) {
        var X = x * Math.cos(rad) - y * Math.sin(rad),
            Y = x * Math.sin(rad) + y * Math.cos(rad);
        return {
          x: X,
          y: Y
        };
      };

      if (!rx || !ry) {
        return [x1, y1, x2, y2, x2, y2];
      }

      if (!recursive) {
        xy = rotate(x1, y1, -rad);
        x1 = xy.x;
        y1 = xy.y;
        xy = rotate(x2, y2, -rad);
        x2 = xy.x;
        y2 = xy.y;
        var cos = Math.cos(Math.PI / 180 * angle),
            sin = Math.sin(Math.PI / 180 * angle),
            x = (x1 - x2) / 2,
            y = (y1 - y2) / 2;
        var h = x * x / (rx * rx) + y * y / (ry * ry);

        if (h > 1) {
          h = Math.sqrt(h);
          rx = h * rx;
          ry = h * ry;
        }

        var rx2 = rx * rx,
            ry2 = ry * ry,
            k = (large_arc_flag == sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),
            cx = k * rx * y / ry + (x1 + x2) / 2,
            cy = k * -ry * x / rx + (y1 + y2) / 2,
            f1 = Math.asin((y1 - cy) / ry),
            f2 = Math.asin((y2 - cy) / ry);
        f1 = x1 < cx ? Math.PI - f1 : f1;
        f2 = x2 < cx ? Math.PI - f2 : f2;
        f1 < 0 && (f1 = Math.PI * 2 + f1);
        f2 < 0 && (f2 = Math.PI * 2 + f2);

        if (sweep_flag && f1 > f2) {
          f1 = f1 - Math.PI * 2;
        }

        if (!sweep_flag && f2 > f1) {
          f2 = f2 - Math.PI * 2;
        }
      } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
      }

      var df = f2 - f1;

      if (Math.abs(df) > _120) {
        var f2old = f2,
            x2old = x2,
            y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * Math.cos(f2);
        y2 = cy + ry * Math.sin(f2);
        res = this.a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
      }

      df = f2 - f1;
      var c1 = Math.cos(f1),
          s1 = Math.sin(f1),
          c2 = Math.cos(f2),
          s2 = Math.sin(f2),
          t = Math.tan(df / 4),
          hx = 4 / 3 * rx * t,
          hy = 4 / 3 * ry * t,
          m1 = [x1, y1],
          m2 = [x1 + hx * s1, y1 - hy * c1],
          m3 = [x2 + hx * s2, y2 - hy * c2],
          m4 = [x2, y2];
      m2[0] = 2 * m1[0] - m2[0];
      m2[1] = 2 * m1[1] - m2[1];

      if (recursive) {
        return [m2, m3, m4].concat(res);
      } else {
        res = [m2, m3, m4].concat(res).join().split(",").map(function (x) {
          return parseFloat(x);
        });
        var newres = [];

        for (var i = 0, ii = res.length; i < ii; i++) {
          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
        }

        return newres;
      }
    }
  }]);

  return PathMaker;
}();

exports.PathMaker = PathMaker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXRoLnRzIl0sIm5hbWVzIjpbIlBhdGhNYWtlciIsInBhdGhEYXRhIiwiYyIsImkiLCJvIiwidiIsIkluZmluaXR5IiwicGFyc2UiLCJ4IiwieSIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJvZmZzZXRYIiwiTWF0aCIsIm1pbiIsIm9mZnNldFkiLCJwMCIsInAxIiwicDIiLCJwMyIsImEiLCJiIiwibWF4Iiwic3FydCIsInJvb3RzIiwibWFwIiwibXVsdGkiLCJmb3JFYWNoIiwicm9vdCIsInZhbHVlIiwicG93IiwicGF0aFJlYWR5IiwicGF0aCIsImxpbmVUbyIsInBhdGhTdGFydCIsInBhdGhDaGFpbiIsInB1c2giLCJtb3ZlVG8iLCJ1cGRhdGVYWSIsImhvcml6b250YWxUbyIsInZlcnRpY2FsVG8iLCJjMXgiLCJjMXkiLCJjMngiLCJjMnkiLCJjYWxjdWxhdGVCZXppZXJNaW5NYXgiLCJjdWJpY0JlemllckN1cnZlVG8iLCJjeCIsImN5IiwicXVhZHJhdGljQmV6aWVyQ3VydmVUbyIsInJ4IiwicnkiLCJ4QXhpc1JvdGF0aW9uIiwibGFyZ2VBcmNGbGFnIiwic3dlZXBGbGFnIiwiY1NlcmllcyIsImEyYyIsImxlbmd0aCIsImlvdkxpc3QiLCJzcGxpY2UiLCJhcmNUbyIsInBhdGhSZWYiLCJwb3AiLCJwYXRoRGF0YVNlcmllcyIsInBhdGhEYXRhV2l0aFR5cGUiLCJwYXRoRGF0YUl0ZW0iLCJjb2RlIiwibW92ZVRvUmVsYXRpdmUiLCJsaW5lVG9SZWxhdGl2ZSIsImhvcml6b250YWxUb1JlbGF0aXZlIiwidmVydGljYWxUb1JlbGF0aXZlIiwieDEiLCJ5MSIsIngyIiwieTIiLCJjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZSIsInF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZSIsImxhcmdlQXJjIiwic3dlZXAiLCJhcmNUb1JlbGF0aXZlIiwiY2xvc2VQYXRoIiwiY29uc29sZSIsImVycm9yIiwiRXJyb3IiLCJyYXRpbyIsIk51bWJlciIsImlzSW50ZWdlciIsInVuaWZvcm0iLCJjb3B5UGF0aCIsImFuZ2xlIiwibGFyZ2VfYXJjX2ZsYWciLCJzd2VlcF9mbGFnIiwicmVjdXJzaXZlIiwiXzEyMCIsIlBJIiwicmFkIiwicmVzIiwieHkiLCJyb3RhdGUiLCJYIiwiY29zIiwic2luIiwiWSIsImgiLCJyeDIiLCJyeTIiLCJrIiwiYWJzIiwiZjEiLCJhc2luIiwiZjIiLCJkZiIsImYyb2xkIiwieDJvbGQiLCJ5Mm9sZCIsImMxIiwiczEiLCJjMiIsInMyIiwidCIsInRhbiIsImh4IiwiaHkiLCJtMSIsIm0yIiwibTMiLCJtNCIsImNvbmNhdCIsImpvaW4iLCJzcGxpdCIsInBhcnNlRmxvYXQiLCJuZXdyZXMiLCJpaSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFYUEsUzs7O0FBYVQ7QUFLQSxxQkFBWUMsUUFBWixFQUErQjtBQUFBOztBQUFBLGtDQWpCUjtBQUNuQkMsTUFBQUEsQ0FBQyxFQUFFLEtBRGdCO0FBRW5CQyxNQUFBQSxDQUFDLEVBQUUsRUFGZ0I7QUFHbkJDLE1BQUFBLENBQUMsRUFBRSxFQUhnQjtBQUluQkMsTUFBQUEsQ0FBQyxFQUFFO0FBSmdCLEtBaUJROztBQUFBLHNDQVZKLENBVUk7O0FBQUEsc0NBVEosQ0FTSTs7QUFBQSxxQ0FSTEMsUUFRSzs7QUFBQSxxQ0FQTEEsUUFPSzs7QUFBQSx1Q0FKWCxLQUlXOztBQUFBLHVDQUhPLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FHUDs7QUFBQSx1Q0FGUyxFQUVUOztBQUMzQixRQUFJTCxRQUFKLEVBQWM7QUFDVixXQUFLTSxLQUFMLENBQVdOLFFBQVg7QUFDSDtBQUNKOzs7OzZCQUVnQk8sQyxFQUFXQyxDLEVBQVc7QUFDbkMsV0FBS0MsUUFBTCxHQUFnQkYsQ0FBaEI7QUFDQSxXQUFLRyxRQUFMLEdBQWdCRixDQUFoQjtBQUNBLFdBQUtHLE9BQUwsR0FBZUMsSUFBSSxDQUFDQyxHQUFMLENBQVMsS0FBS0YsT0FBZCxFQUF1QkosQ0FB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QUFDMUgsQ0FBRCxDQUFkO0FBQUEsU0FBaEQsQ0FBTjtBQUNBLFlBQUkySCxNQUFNLEdBQUcsRUFBYjs7QUFDQSxhQUFLLElBQUloSSxDQUFDLEdBQUcsQ0FBUixFQUFXaUksRUFBRSxHQUFHcEMsR0FBRyxDQUFDdkMsTUFBekIsRUFBaUN0RCxDQUFDLEdBQUdpSSxFQUFyQyxFQUF5Q2pJLENBQUMsRUFBMUMsRUFBOEM7QUFDMUNnSSxVQUFBQSxNQUFNLENBQUNoSSxDQUFELENBQU4sR0FBWUEsQ0FBQyxHQUFHLENBQUosR0FBUStGLE1BQU0sQ0FBQ0YsR0FBRyxDQUFDN0YsQ0FBQyxHQUFHLENBQUwsQ0FBSixFQUFhNkYsR0FBRyxDQUFDN0YsQ0FBRCxDQUFoQixFQUFxQjRGLEdBQXJCLENBQU4sQ0FBZ0N0RixDQUF4QyxHQUE0Q3lGLE1BQU0sQ0FBQ0YsR0FBRyxDQUFDN0YsQ0FBRCxDQUFKLEVBQVM2RixHQUFHLENBQUM3RixDQUFDLEdBQUcsQ0FBTCxDQUFaLEVBQXFCNEYsR0FBckIsQ0FBTixDQUFnQ3ZGLENBQXhGO0FBQ0g7O0FBQ0QsZUFBTzJILE1BQVA7QUFDSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aERlZiB9IGZyb20gJy4vYW5pbWF0aW9uJ1xyXG5pbXBvcnQgeyBwYXJzZVNWRywgTW92ZVRvQ29tbWFuZCwgTGluZVRvQ29tbWFuZCwgSG9yaXpvbnRhbExpbmVUb0NvbW1hbmQsIFZlcnRpY2FsTGluZVRvQ29tbWFuZCwgQ3VydmVUb0NvbW1hbmQsIFF1YWRyYXRpY0N1cnZlVG9Db21tYW5kLCBFbGxpcHRpY2FsQXJjQ29tbWFuZCB9IGZyb20gJ3N2Zy1wYXRoLXBhcnNlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUGF0aE1ha2VyIHtcclxuICAgIHB1YmxpYyBwYXRoOiBQYXRoRGVmID0ge1xyXG4gICAgICAgIGM6IGZhbHNlLFxyXG4gICAgICAgIGk6IFtdLFxyXG4gICAgICAgIG86IFtdLFxyXG4gICAgICAgIHY6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgY3VycmVudFg6IG51bWJlciA9IDA7XHJcbiAgICBwcml2YXRlIGN1cnJlbnRZOiBudW1iZXIgPSAwO1xyXG4gICAgcHJpdmF0ZSBvZmZzZXRYOiBudW1iZXIgPSBJbmZpbml0eTtcclxuICAgIHByaXZhdGUgb2Zmc2V0WTogbnVtYmVyID0gSW5maW5pdHk7XHJcblxyXG4gICAgLy8gZm9yIGRpc2NvbnRpbnVvdXMgcGF0aHNcclxuICAgIHByaXZhdGUgcGF0aFJlYWR5ID0gZmFsc2VcclxuICAgIHByaXZhdGUgcGF0aFN0YXJ0OiBbbnVtYmVyLCBudW1iZXJdID0gWzAsIDBdXHJcbiAgICBwcml2YXRlIHBhdGhDaGFpbjogW251bWJlciwgbnVtYmVyXVtdID0gW11cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwYXRoRGF0YT86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChwYXRoRGF0YSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnNlKHBhdGhEYXRhKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVhZKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50WCA9IHhcclxuICAgICAgICB0aGlzLmN1cnJlbnRZID0geVxyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluKHRoaXMub2Zmc2V0WCwgeClcclxuICAgICAgICB0aGlzLm9mZnNldFkgPSBNYXRoLm1pbih0aGlzLm9mZnNldFksIHkpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVCZXppZXJNaW5NYXgocDA6IG51bWJlciwgcDE6IG51bWJlciwgcDI6IG51bWJlciwgcDM6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xyXG4gICAgICAgIGNvbnN0IGEgPSAzICogKHAzIC0gMyAqIHAyICsgMyAqIHAxIC0gcDApXHJcbiAgICAgICAgY29uc3QgYiA9IDYgKiAocDIgLSAyICogcDEgKyBwMClcclxuICAgICAgICBjb25zdCBjID0gMyAqIChwMSAtIHAwKVxyXG4gICAgICAgIGxldCBtaW4gPSBJbmZpbml0eSwgbWF4ID0gLUluZmluaXR5XHJcbiAgICAgICAgaWYgKGIgKiBiIC0gNCAqIGEgKiBjID49IDApIHtcclxuICAgICAgICAgICAgY29uc3Qgc3FydCA9IE1hdGguc3FydChiICogYiAtIDQgKiBhICogYylcclxuICAgICAgICAgICAgY29uc3Qgcm9vdHMgPSBbMSwgLTFdLm1hcChtdWx0aSA9PiAobXVsdGkgKiBzcXJ0IC0gYikgLyAyIC8gYSlcclxuICAgICAgICAgICAgcm9vdHMuZm9yRWFjaChyb290ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChyb290ID4gMCAmJiByb290IDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5wb3coMSAtIHJvb3QsIDMpICogcDAgKyAzICogTWF0aC5wb3coMSAtIHJvb3QsIDIpICogcm9vdCAqIHAxICsgMyAqICgxIC0gcm9vdCkgKiByb290ICogcm9vdCAqIHAyICsgTWF0aC5wb3cocm9vdCwgMykgKiBwM1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB2YWx1ZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBwMCwgcDMpXHJcbiAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBwMCwgcDMpXHJcbiAgICAgICAgcmV0dXJuIFttaW4sIG1heF1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW92ZVRvKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBhdGhSZWFkeSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdGguYyA9IGZhbHNlXHJcbiAgICAgICAgICAgIHRoaXMucGF0aC5pID0gW1swLCAwXV1cclxuICAgICAgICAgICAgdGhpcy5wYXRoLm8gPSBbXVxyXG4gICAgICAgICAgICB0aGlzLnBhdGgudiA9IFtbeCwgeV1dXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFggPSB4XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFkgPSB5XHJcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0WCA9IHhcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXRZID0geVxyXG4gICAgICAgICAgICB0aGlzLnBhdGhSZWFkeSA9IHRydWVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxpbmVUbyguLi50aGlzLnBhdGhTdGFydClcclxuICAgICAgICAgICAgdGhpcy5saW5lVG8oeCwgeSlcclxuICAgICAgICAgICAgdGhpcy5wYXRoQ2hhaW4ucHVzaCh0aGlzLnBhdGhTdGFydClcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYXRoU3RhcnQgPSBbeCwgeV1cclxuICAgIH1cclxuICAgIHB1YmxpYyBtb3ZlVG9SZWxhdGl2ZSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubW92ZVRvKHRoaXMuY3VycmVudFggKyB4LCB0aGlzLmN1cnJlbnRZICsgeSlcclxuICAgIH1cclxuICAgIHB1YmxpYyBsaW5lVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnBhdGguaSEucHVzaChbMCwgMF0pXHJcbiAgICAgICAgdGhpcy5wYXRoLm8hLnB1c2goWzAsIDBdKVxyXG4gICAgICAgIHRoaXMucGF0aC52IS5wdXNoKFt4LCB5XSlcclxuICAgICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgbGluZVRvUmVsYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmxpbmVUbyh0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaG9yaXpvbnRhbFRvKHg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMubGluZVRvKHgsIHRoaXMuY3VycmVudFkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgaG9yaXpvbnRhbFRvUmVsYXRpdmUoeDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsVG8odGhpcy5jdXJyZW50WCArIHgpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdmVydGljYWxUbyh5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmxpbmVUbyh0aGlzLmN1cnJlbnRYLCB5KVxyXG4gICAgfVxyXG4gICAgcHVibGljIHZlcnRpY2FsVG9SZWxhdGl2ZSh5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnZlcnRpY2FsVG8odGhpcy5jdXJyZW50WSArIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY3ViaWNCZXppZXJDdXJ2ZVRvKFxyXG4gICAgICAgIGMxeDogbnVtYmVyLFxyXG4gICAgICAgIGMxeTogbnVtYmVyLFxyXG4gICAgICAgIGMyeDogbnVtYmVyLFxyXG4gICAgICAgIGMyeTogbnVtYmVyLFxyXG4gICAgICAgIHg6IG51bWJlcixcclxuICAgICAgICB5OiBudW1iZXJcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMucGF0aC5pIS5wdXNoKFtjMnggLSB4LCBjMnkgLSB5XSlcclxuICAgICAgICB0aGlzLnBhdGgubyEucHVzaChbYzF4IC0gdGhpcy5jdXJyZW50WCwgYzF5IC0gdGhpcy5jdXJyZW50WV0pXHJcbiAgICAgICAgdGhpcy5wYXRoLnYhLnB1c2goW3gsIHldKVxyXG4gICAgICAgIHRoaXMub2Zmc2V0WCA9IE1hdGgubWluKHRoaXMub2Zmc2V0WCwgLi4udGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WCwgYzF4LCBjMngsIHgpKVxyXG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluKHRoaXMub2Zmc2V0WSwgLi4udGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgYzF5LCBjMnksIHkpKVxyXG4gICAgICAgIHRoaXMudXBkYXRlWFkoeCwgeSlcclxuICAgIH1cclxuICAgIHB1YmxpYyBjdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZShcclxuICAgICAgICBjMXg6IG51bWJlcixcclxuICAgICAgICBjMXk6IG51bWJlcixcclxuICAgICAgICBjMng6IG51bWJlcixcclxuICAgICAgICBjMnk6IG51bWJlcixcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmN1YmljQmV6aWVyQ3VydmVUbyh0aGlzLmN1cnJlbnRYICsgYzF4LCB0aGlzLmN1cnJlbnRZICsgYzF5LCB0aGlzLmN1cnJlbnRYICsgYzJ4LCB0aGlzLmN1cnJlbnRZICsgYzJ5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcXVhZHJhdGljQmV6aWVyQ3VydmVUbyhjeDogbnVtYmVyLCBjeTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMucGF0aC5pIS5wdXNoKFtjeCAtIHgsIGN5IC0geV0pXHJcbiAgICAgICAgdGhpcy5wYXRoLm8hLnB1c2goW2N4IC0gdGhpcy5jdXJyZW50WCwgY3kgLSB0aGlzLmN1cnJlbnRZXSlcclxuICAgICAgICB0aGlzLnBhdGgudiEucHVzaChbeCwgeV0pXHJcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4odGhpcy5vZmZzZXRYLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRYLCBjeCwgY3gsIHgpKVxyXG4gICAgICAgIHRoaXMub2Zmc2V0WSA9IE1hdGgubWluKHRoaXMub2Zmc2V0WSwgLi4udGhpcy5jYWxjdWxhdGVCZXppZXJNaW5NYXgodGhpcy5jdXJyZW50WSwgY3ksIGN5LCB5KSlcclxuICAgICAgICB0aGlzLnVwZGF0ZVhZKHgsIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgcXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKGN4OiBudW1iZXIsIGN5OiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5xdWFkcmF0aWNCZXppZXJDdXJ2ZVRvKHRoaXMuY3VycmVudFggKyBjeCwgdGhpcy5jdXJyZW50WSArIGN5LCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXHJcbiAgICB9XHJcbiAgICBwdWJsaWMgYXJjVG8oXHJcbiAgICAgICAgcng6IG51bWJlcixcclxuICAgICAgICByeTogbnVtYmVyLFxyXG4gICAgICAgIHhBeGlzUm90YXRpb246IG51bWJlcixcclxuICAgICAgICBsYXJnZUFyY0ZsYWc6IG51bWJlcixcclxuICAgICAgICBzd2VlcEZsYWc6IG51bWJlcixcclxuICAgICAgICB4OiBudW1iZXIsXHJcbiAgICAgICAgeTogbnVtYmVyXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBjU2VyaWVzID0gUGF0aE1ha2VyLmEyYyh0aGlzLmN1cnJlbnRYLCB0aGlzLmN1cnJlbnRZLCByeCwgcnksIHhBeGlzUm90YXRpb24sIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB4LCB5KSBhcyBudW1iZXJbXVxyXG4gICAgICAgIHdoaWxlIChjU2VyaWVzLmxlbmd0aCA+PSA2KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlvdkxpc3QgPSBjU2VyaWVzLnNwbGljZSgwLCA2KVxyXG4gICAgICAgICAgICB0aGlzLnBhdGguaSEucHVzaChbaW92TGlzdFsyXSAtIGlvdkxpc3RbNF0sIGlvdkxpc3RbM10gLSBpb3ZMaXN0WzVdXSlcclxuICAgICAgICAgICAgdGhpcy5wYXRoLm8hLnB1c2goW2lvdkxpc3RbMF0gLSB0aGlzLmN1cnJlbnRYLCBpb3ZMaXN0WzFdIC0gdGhpcy5jdXJyZW50WV0pXHJcbiAgICAgICAgICAgIHRoaXMucGF0aC52IS5wdXNoKFtpb3ZMaXN0WzRdLCBpb3ZMaXN0WzVdXSlcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXRYID0gTWF0aC5taW4odGhpcy5vZmZzZXRYLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRYLCBpb3ZMaXN0WzBdLCBpb3ZMaXN0WzJdLCBpb3ZMaXN0WzRdKSlcclxuICAgICAgICAgICAgdGhpcy5vZmZzZXRZID0gTWF0aC5taW4odGhpcy5vZmZzZXRZLCAuLi50aGlzLmNhbGN1bGF0ZUJlemllck1pbk1heCh0aGlzLmN1cnJlbnRZLCBpb3ZMaXN0WzFdLCBpb3ZMaXN0WzNdLCBpb3ZMaXN0WzVdKSlcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVYWShpb3ZMaXN0WzRdLCBpb3ZMaXN0WzVdKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBhcmNUb1JlbGF0aXZlKFxyXG4gICAgICAgIHJ4OiBudW1iZXIsXHJcbiAgICAgICAgcnk6IG51bWJlcixcclxuICAgICAgICB4QXhpc1JvdGF0aW9uOiBudW1iZXIsXHJcbiAgICAgICAgbGFyZ2VBcmNGbGFnOiBudW1iZXIsXHJcbiAgICAgICAgc3dlZXBGbGFnOiBudW1iZXIsXHJcbiAgICAgICAgeDogbnVtYmVyLFxyXG4gICAgICAgIHk6IG51bWJlclxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5hcmNUbyhyeCwgcnksIHhBeGlzUm90YXRpb24sIGxhcmdlQXJjRmxhZywgc3dlZXBGbGFnLCB0aGlzLmN1cnJlbnRYICsgeCwgdGhpcy5jdXJyZW50WSArIHkpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYTJjKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXIsIGFuZ2xlOiBudW1iZXIsIGxhcmdlX2FyY19mbGFnOiBudW1iZXIsIHN3ZWVwX2ZsYWc6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgcmVjdXJzaXZlPzogbnVtYmVyW10pOiBudW1iZXJbXSB8IG51bWJlcltdW10ge1xyXG4gICAgICAgIC8vIGZvciBtb3JlIGluZm9ybWF0aW9uIG9mIHdoZXJlIHRoaXMgTWF0aCBjYW1lIGZyb20gdmlzaXQ6XHJcbiAgICAgICAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvaW1wbG5vdGUuaHRtbCNBcmNJbXBsZW1lbnRhdGlvbk5vdGVzXHJcbiAgICAgICAgdmFyIF8xMjAgPSBNYXRoLlBJICogMTIwIC8gMTgwLFxyXG4gICAgICAgICAgICByYWQgPSBNYXRoLlBJIC8gMTgwICogKCthbmdsZSB8fCAwKSxcclxuICAgICAgICAgICAgcmVzOiBudW1iZXJbXSA9IFtdLFxyXG4gICAgICAgICAgICB4eSxcclxuICAgICAgICAgICAgcm90YXRlID0gKHg6IG51bWJlciwgeTogbnVtYmVyLCByYWQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIFggPSB4ICogTWF0aC5jb3MocmFkKSAtIHkgKiBNYXRoLnNpbihyYWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIFkgPSB4ICogTWF0aC5zaW4ocmFkKSArIHkgKiBNYXRoLmNvcyhyYWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogWCwgeTogWSB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIGlmICghcnggfHwgIXJ5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbeDEsIHkxLCB4MiwgeTIsIHgyLCB5Ml07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghcmVjdXJzaXZlKSB7XHJcbiAgICAgICAgICAgIHh5ID0gcm90YXRlKHgxLCB5MSwgLXJhZCk7XHJcbiAgICAgICAgICAgIHgxID0geHkueDtcclxuICAgICAgICAgICAgeTEgPSB4eS55O1xyXG4gICAgICAgICAgICB4eSA9IHJvdGF0ZSh4MiwgeTIsIC1yYWQpO1xyXG4gICAgICAgICAgICB4MiA9IHh5Lng7XHJcbiAgICAgICAgICAgIHkyID0geHkueTtcclxuICAgICAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKE1hdGguUEkgLyAxODAgKiBhbmdsZSksXHJcbiAgICAgICAgICAgICAgICBzaW4gPSBNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogYW5nbGUpLFxyXG4gICAgICAgICAgICAgICAgeCA9ICh4MSAtIHgyKSAvIDIsXHJcbiAgICAgICAgICAgICAgICB5ID0gKHkxIC0geTIpIC8gMjtcclxuICAgICAgICAgICAgdmFyIGggPSB4ICogeCAvIChyeCAqIHJ4KSArIHkgKiB5IC8gKHJ5ICogcnkpO1xyXG4gICAgICAgICAgICBpZiAoaCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGggPSBNYXRoLnNxcnQoaCk7XHJcbiAgICAgICAgICAgICAgICByeCA9IGggKiByeDtcclxuICAgICAgICAgICAgICAgIHJ5ID0gaCAqIHJ5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByeDIgPSByeCAqIHJ4LFxyXG4gICAgICAgICAgICAgICAgcnkyID0gcnkgKiByeSxcclxuICAgICAgICAgICAgICAgIGsgPSAobGFyZ2VfYXJjX2ZsYWcgPT0gc3dlZXBfZmxhZyA/IC0xIDogMSkgKlxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguc3FydChNYXRoLmFicygocngyICogcnkyIC0gcngyICogeSAqIHkgLSByeTIgKiB4ICogeCkgLyAocngyICogeSAqIHkgKyByeTIgKiB4ICogeCkpKSxcclxuICAgICAgICAgICAgICAgIGN4ID0gayAqIHJ4ICogeSAvIHJ5ICsgKHgxICsgeDIpIC8gMixcclxuICAgICAgICAgICAgICAgIGN5ID0gayAqIC1yeSAqIHggLyByeCArICh5MSArIHkyKSAvIDIsXHJcbiAgICAgICAgICAgICAgICBmMSA9IE1hdGguYXNpbigoeTEgLSBjeSkgLyByeSksXHJcbiAgICAgICAgICAgICAgICBmMiA9IE1hdGguYXNpbigoeTIgLSBjeSkgLyByeSk7XHJcblxyXG4gICAgICAgICAgICBmMSA9IHgxIDwgY3ggPyBNYXRoLlBJIC0gZjEgOiBmMTtcclxuICAgICAgICAgICAgZjIgPSB4MiA8IGN4ID8gTWF0aC5QSSAtIGYyIDogZjI7XHJcbiAgICAgICAgICAgIGYxIDwgMCAmJiAoZjEgPSBNYXRoLlBJICogMiArIGYxKTtcclxuICAgICAgICAgICAgZjIgPCAwICYmIChmMiA9IE1hdGguUEkgKiAyICsgZjIpO1xyXG4gICAgICAgICAgICBpZiAoc3dlZXBfZmxhZyAmJiBmMSA+IGYyKSB7XHJcbiAgICAgICAgICAgICAgICBmMSA9IGYxIC0gTWF0aC5QSSAqIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFzd2VlcF9mbGFnICYmIGYyID4gZjEpIHtcclxuICAgICAgICAgICAgICAgIGYyID0gZjIgLSBNYXRoLlBJICogMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGYxID0gcmVjdXJzaXZlWzBdO1xyXG4gICAgICAgICAgICBmMiA9IHJlY3Vyc2l2ZVsxXTtcclxuICAgICAgICAgICAgY3ggPSByZWN1cnNpdmVbMl07XHJcbiAgICAgICAgICAgIGN5ID0gcmVjdXJzaXZlWzNdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGYgPSBmMiAtIGYxO1xyXG4gICAgICAgIGlmIChNYXRoLmFicyhkZikgPiBfMTIwKSB7XHJcbiAgICAgICAgICAgIHZhciBmMm9sZCA9IGYyLFxyXG4gICAgICAgICAgICAgICAgeDJvbGQgPSB4MixcclxuICAgICAgICAgICAgICAgIHkyb2xkID0geTI7XHJcbiAgICAgICAgICAgIGYyID0gZjEgKyBfMTIwICogKHN3ZWVwX2ZsYWcgJiYgZjIgPiBmMSA/IDEgOiAtMSk7XHJcbiAgICAgICAgICAgIHgyID0gY3ggKyByeCAqIE1hdGguY29zKGYyKTtcclxuICAgICAgICAgICAgeTIgPSBjeSArIHJ5ICogTWF0aC5zaW4oZjIpO1xyXG4gICAgICAgICAgICByZXMgPSB0aGlzLmEyYyh4MiwgeTIsIHJ4LCByeSwgYW5nbGUsIDAsIHN3ZWVwX2ZsYWcsIHgyb2xkLCB5Mm9sZCwgW2YyLCBmMm9sZCwgY3gsIGN5XSkgYXMgbnVtYmVyW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRmID0gZjIgLSBmMTtcclxuICAgICAgICB2YXIgYzEgPSBNYXRoLmNvcyhmMSksXHJcbiAgICAgICAgICAgIHMxID0gTWF0aC5zaW4oZjEpLFxyXG4gICAgICAgICAgICBjMiA9IE1hdGguY29zKGYyKSxcclxuICAgICAgICAgICAgczIgPSBNYXRoLnNpbihmMiksXHJcbiAgICAgICAgICAgIHQgPSBNYXRoLnRhbihkZiAvIDQpLFxyXG4gICAgICAgICAgICBoeCA9IDQgLyAzICogcnggKiB0LFxyXG4gICAgICAgICAgICBoeSA9IDQgLyAzICogcnkgKiB0LFxyXG4gICAgICAgICAgICBtMSA9IFt4MSwgeTFdLFxyXG4gICAgICAgICAgICBtMiA9IFt4MSArIGh4ICogczEsIHkxIC0gaHkgKiBjMV0sXHJcbiAgICAgICAgICAgIG0zID0gW3gyICsgaHggKiBzMiwgeTIgLSBoeSAqIGMyXSxcclxuICAgICAgICAgICAgbTQgPSBbeDIsIHkyXTtcclxuICAgICAgICBtMlswXSA9IDIgKiBtMVswXSAtIG0yWzBdO1xyXG4gICAgICAgIG0yWzFdID0gMiAqIG0xWzFdIC0gbTJbMV07XHJcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gW20yLCBtMywgbTRdLmNvbmNhdChyZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcyA9IFttMiwgbTMsIG00XS5jb25jYXQocmVzKS5qb2luKCkuc3BsaXQoXCIsXCIpLm1hcCh4ID0+IHBhcnNlRmxvYXQoeCkpO1xyXG4gICAgICAgICAgICB2YXIgbmV3cmVzID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHJlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdyZXNbaV0gPSBpICUgMiA/IHJvdGF0ZShyZXNbaSAtIDFdLCByZXNbaV0sIHJhZCkueSA6IHJvdGF0ZShyZXNbaV0sIHJlc1tpICsgMV0sIHJhZCkueDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3cmVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xvc2VQYXRoKCkge1xyXG4gICAgICAgIHRoaXMucGF0aC5jID0gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1bmlmb3JtKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhdGhDaGFpbi5sZW5ndGggJiYgISh0aGlzLmN1cnJlbnRYID09IHRoaXMucGF0aFN0YXJ0WzBdICYmIHRoaXMuY3VycmVudFkgPT0gdGhpcy5wYXRoU3RhcnRbMV0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGluZVRvKC4uLnRoaXMucGF0aFN0YXJ0KVxyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAodGhpcy5wYXRoQ2hhaW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhSZWYgPSB0aGlzLnBhdGhDaGFpbi5wb3AoKSFcclxuICAgICAgICAgICAgdGhpcy5saW5lVG8oLi4ucGF0aFJlZilcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHRoaXMucGF0aC5vIS5sZW5ndGggPCB0aGlzLnBhdGguaSEubGVuZ3RoKVxyXG4gICAgICAgICAgICB0aGlzLnBhdGgubyEucHVzaChbMCwgMF0pXHJcbiAgICAgICAgdGhpcy5wYXRoLnYhLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICB2YWx1ZVswXSAtPSB0aGlzLm9mZnNldFhcclxuICAgICAgICAgICAgdmFsdWVbMV0gLT0gdGhpcy5vZmZzZXRZXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLm9mZnNldFggPSAwXHJcbiAgICAgICAgdGhpcy5vZmZzZXRZID0gMFxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwYXJzZShwYXRoRGF0YTogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgcGF0aERhdGFTZXJpZXMgPSBwYXJzZVNWRyhwYXRoRGF0YSlcclxuICAgICAgICBsZXQgcGF0aERhdGFXaXRoVHlwZTtcclxuICAgICAgICBwYXRoRGF0YVNlcmllcy5mb3JFYWNoKHBhdGhEYXRhSXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocGF0aERhdGFJdGVtLmNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgTW92ZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdtJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIE1vdmVUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBMaW5lVG9Db21tYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lVG8ocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgTGluZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgSG9yaXpvbnRhbExpbmVUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxUbyhwYXRoRGF0YVdpdGhUeXBlLngpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgSG9yaXpvbnRhbExpbmVUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvcml6b250YWxUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueClcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVic6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBWZXJ0aWNhbExpbmVUb0NvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2FsVG8ocGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICd2JzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIFZlcnRpY2FsTGluZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmVydGljYWxUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnQyc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBDdXJ2ZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3ViaWNCZXppZXJDdXJ2ZVRvKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueDIsIHBhdGhEYXRhV2l0aFR5cGUueTIsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEN1cnZlVG9Db21tYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdWJpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBRdWFkcmF0aWNDdXJ2ZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVhZHJhdGljQmV6aWVyQ3VydmVUbyhwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBRdWFkcmF0aWNDdXJ2ZVRvQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueDEsIHBhdGhEYXRhV2l0aFR5cGUueTEsIHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcclxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEVsbGlwdGljYWxBcmNDb21tYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcmNUbyhwYXRoRGF0YVdpdGhUeXBlLnJ4LCBwYXRoRGF0YVdpdGhUeXBlLnJ5LCBwYXRoRGF0YVdpdGhUeXBlLnhBeGlzUm90YXRpb24sIH5+cGF0aERhdGFXaXRoVHlwZS5sYXJnZUFyYywgfn5wYXRoRGF0YVdpdGhUeXBlLnN3ZWVwLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBFbGxpcHRpY2FsQXJjQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXJjVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnJ4LCBwYXRoRGF0YVdpdGhUeXBlLnJ5LCBwYXRoRGF0YVdpdGhUeXBlLnhBeGlzUm90YXRpb24sIH5+cGF0aERhdGFXaXRoVHlwZS5sYXJnZUFyYywgfn5wYXRoRGF0YVdpdGhUeXBlLnN3ZWVwLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnWic6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd6JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlUGF0aCgpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihwYXRoRGF0YUl0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBpbXBsZW1lbnRhdGlvbiBmb3VuZCBmb3IgdGhpcyBwYXRoIGNvbW1hbmQuJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwc2FtcGxlKHJhdGlvOiBudW1iZXIpIHtcclxuICAgICAgICAvLyB1c2UgRGUgQ2FzdGVsamF1J3MgYWxnb3JpdGhtIHRvIGRvIHRoZSB1cHNhbXBsaW5nXHJcbiAgICAgICAgLy8gUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EZV9DYXN0ZWxqYXUlMjdzX2FsZ29yaXRobVxyXG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyYXRpbykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdXBzYW1wbGluZyByYXRpbyBzaG91bGQgYmUgYW4gaW50ZWdlci4nKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmF0aW8gPD0gMSkgcmV0dXJuXHJcbiAgICAgICAgdGhpcy51bmlmb3JtKClcclxuICAgICAgICBjb25zdCBjb3B5UGF0aDogUGF0aERlZiA9IHtcclxuICAgICAgICAgICAgYzogdGhpcy5wYXRoLmMsXHJcbiAgICAgICAgICAgIGk6IFtdLFxyXG4gICAgICAgICAgICBvOiBbXSxcclxuICAgICAgICAgICAgdjogW11cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==