"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.render = render;
exports.renderText = renderText;
exports.renderImage = renderImage;

var _path = require("./path");

var _v = _interopRequireDefault(require("uuid/v4"));

var _svgPathParser = require("svg-path-parser");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function render(dom) {
  if (dom instanceof SVGTextElement || dom instanceof SVGImageElement) {
    return {};
  } else if (dom instanceof SVGGElement) {
    return renderGroup(dom);
  } else {
    return renderGlyph(dom);
  }
}

function encodeLineCap(type) {
  switch (type) {
    case 'square':
      return 3;

    case 'butt':
      return 1;

    default:
      return 2;
  }
}

function encodeLineJoin(type) {
  switch (type) {
    case 'miter':
      return 1;

    case 'bevel':
      return 3;

    default:
      return 2;
  }
}

function addVisualEncodings(items, styles) {
  if (styles.stroke && styles.stroke !== 'none') {
    items.push({
      ty: 'st',
      c: {
        k: styles.stroke.split('(')[1].split(')')[0].split(',').slice(0, 3).map(function (raw) {
          return parseInt(raw) / 255;
        }).concat(1)
      },
      o: {
        k: parseFloat(styles.strokeOpacity || '1') * 100
      },
      w: {
        k: parseFloat(styles.strokeWidth || '1')
      },
      lc: encodeLineCap(styles.strokeLinecap),
      lj: encodeLineJoin(styles.strokeLinejoin)
    });
  }

  if (styles.fill && styles.fill !== 'none') {
    items.push({
      ty: 'fl',
      c: {
        k: styles.fill.split('(')[1].split(')')[0].split(',').slice(0, 3).map(function (raw) {
          return parseInt(raw) / 255;
        }).concat(1)
      },
      o: {
        k: parseFloat(styles.fillOpacity || '1') * 100
      }
    });
  }

  items.push({
    ty: "tr",
    p: {
      k: [0, 0]
    },
    a: {
      k: [0, 0]
    },
    s: {
      k: [100, 100]
    },
    r: {
      k: 0
    },
    o: {
      k: 100
    },
    sk: {
      k: 0
    },
    sa: {
      k: 0
    }
  });
}

function renderGlyph(dom) {
  var group = {
    ty: "gr",
    it: [],
    bm: 0,
    hd: false
  };

  var postActions = function postActions(pathMaker) {
    pathMaker.uniform();
    group.it.push({
      ty: 'sh',
      ks: {
        k: pathMaker.path,
        a: 0
      },
      nm: dom.id,
      hd: false
    });
    var styles = window.getComputedStyle(dom);
    addVisualEncodings(group.it, styles);
  };

  if (dom instanceof SVGCircleElement) {
    var svgLength = dom.r.baseVal;
    svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
    var r = svgLength.valueInSpecifiedUnits;
    var pathMaker = new _path.PathMaker();
    pathMaker.moveTo(r, 0);
    pathMaker.arcTo(r, r, 0, 1, 0, r, 2 * r);
    pathMaker.arcTo(r, r, 0, 1, 0, r, 0);
    pathMaker.closePath();
    postActions(pathMaker);
  } else if (dom instanceof SVGEllipseElement) {
    var mapKey = ['rx', 'ry'];

    var _mapKey$map = mapKey.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey$map2 = _slicedToArray(_mapKey$map, 2),
        rx = _mapKey$map2[0],
        ry = _mapKey$map2[1];

    var _pathMaker = new _path.PathMaker();

    _pathMaker.moveTo(rx, 0);

    _pathMaker.arcTo(rx, ry, 0, 1, 0, rx, 2 * ry);

    _pathMaker.arcTo(rx, ry, 0, 1, 0, rx, 0);

    _pathMaker.closePath();

    postActions(_pathMaker);
  } else if (dom instanceof SVGLineElement) {
    var _mapKey = ['x1', 'x2', 'y1', 'y2'];

    var _mapKey$map3 = _mapKey.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey$map4 = _slicedToArray(_mapKey$map3, 4),
        x1 = _mapKey$map4[0],
        x2 = _mapKey$map4[1],
        y1 = _mapKey$map4[2],
        y2 = _mapKey$map4[3];

    var offsetX = Math.min(x1, x2);
    var offsetY = Math.min(y1, y2);

    var _pathMaker2 = new _path.PathMaker();

    _pathMaker2.moveTo(x1 - offsetX, y1 - offsetY);

    _pathMaker2.lineTo(x2 - offsetX, y2 - offsetY);

    postActions(_pathMaker2);
  } else if (dom instanceof SVGPathElement) {
    var pathData = dom.getAttribute('d') || '';
    var pathDataSeries = (0, _svgPathParser.parseSVG)(pathData);

    var _pathMaker3 = new _path.PathMaker();

    var pathDataWithType;
    pathDataSeries.forEach(function (pathDataItem) {
      switch (pathDataItem.code) {
        case 'M':
          pathDataWithType = pathDataItem;

          _pathMaker3.moveTo(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'L':
          pathDataWithType = pathDataItem;

          _pathMaker3.lineTo(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'l':
          pathDataWithType = pathDataItem;

          _pathMaker3.lineToRelative(pathDataWithType.x, pathDataWithType.y);

          break;

        case 'H':
          pathDataWithType = pathDataItem;

          _pathMaker3.horizontalTo(pathDataWithType.x);

          break;

        case 'h':
          pathDataWithType = pathDataItem;

          _pathMaker3.horizontalToRelative(pathDataWithType.x);

          break;

        case 'V':
          pathDataWithType = pathDataItem;

          _pathMaker3.verticalTo(pathDataWithType.y);

          break;

        case 'v':
          pathDataWithType = pathDataItem;

          _pathMaker3.verticalToRelative(pathDataWithType.y);

          break;

        case 'C':
          pathDataWithType = pathDataItem;

          _pathMaker3.cubicBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'c':
          pathDataWithType = pathDataItem;

          _pathMaker3.cubicBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x2, pathDataWithType.y2, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'Q':
          pathDataWithType = pathDataItem;

          _pathMaker3.quadraticBezierCurveTo(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'q':
          pathDataWithType = pathDataItem;

          _pathMaker3.quadraticBezierCurveToRelative(pathDataWithType.x1, pathDataWithType.y1, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'A':
          pathDataWithType = pathDataItem;

          _pathMaker3.arcTo(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'a':
          pathDataWithType = pathDataItem;

          _pathMaker3.arcToRelative(pathDataWithType.rx, pathDataWithType.ry, pathDataWithType.xAxisRotation, ~~pathDataWithType.largeArc, ~~pathDataWithType.sweep, pathDataWithType.x, pathDataWithType.y);

          break;

        case 'Z':
        case 'z':
          _pathMaker3.closePath();

          break;

        default:
          console.error(pathDataItem);
          throw new Error('No implementation found for this path command.');
      }
    });
    postActions(_pathMaker3);
  } else if (dom instanceof SVGPolygonElement || dom instanceof SVGPolylineElement) {
    var points = dom.points;

    if (points.length) {
      var iterablePoints = Array.prototype.slice.call(points);

      var _offsetX = iterablePoints.reduce(function (p, v) {
        return Math.min(p, v.x);
      }, 0);

      var _offsetY = iterablePoints.reduce(function (p, v) {
        return Math.min(p, v.y);
      }, 0);

      var _pathMaker4 = new _path.PathMaker();

      _pathMaker4.moveTo(points[0].x - _offsetX, points[0].y - _offsetY);

      iterablePoints.forEach(function (v, i) {
        if (i <= 0) return;

        _pathMaker4.lineTo(v.x - _offsetX, v.y - _offsetY);
      });

      if (dom instanceof SVGPolygonElement) {
        _pathMaker4.closePath();
      }

      postActions(_pathMaker4);
    }
  } else if (dom instanceof SVGRectElement) {
    var _mapKey2 = ['width', 'height'];

    var _mapKey2$map = _mapKey2.map(function (key) {
      var svgLength = dom[key].baseVal;
      svgLength.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
      return svgLength.valueInSpecifiedUnits;
    }),
        _mapKey2$map2 = _slicedToArray(_mapKey2$map, 2),
        width = _mapKey2$map2[0],
        height = _mapKey2$map2[1];

    var _pathMaker5 = new _path.PathMaker();

    _pathMaker5.moveTo(0, 0);

    _pathMaker5.lineTo(width, 0);

    _pathMaker5.lineTo(width, height);

    _pathMaker5.lineTo(0, height);

    _pathMaker5.closePath();

    postActions(_pathMaker5);
  } else {
    console.error(dom);
    throw new Error('No implementation found for svg graphics element.');
  }

  return group;
}

function renderGroup(dom) {
  var group = {
    ty: 'gr',
    it: [],
    nm: dom.id,
    bm: 0,
    hd: false
  };
  dom.childNodes.forEach(function (node) {
    if (node instanceof SVGGraphicsElement) {
      var child = render(node);

      if (child.ty) {
        group.it.push(child);
      }
    }
  });
  return group;
}

function renderText(dom) {
  var computedStyle = getComputedStyle(dom);
  var fontSize = parseFloat(computedStyle.fontSize),
      fontFamily = computedStyle.fontFamily.split(',')[0].trim(),
      fontStyle = computedStyle.fontStyle,
      fontName = "".concat(fontFamily, "-").concat(fontStyle),
      fontAscent = parseFloat(computedStyle.lineHeight || "".concat(fontSize)),
      fontColor = (computedStyle.color || 'rgb(0,0,0)').split('(')[1].split(')')[0].split(',').map(function (i) {
    return parseInt(i) / 255;
  });
  var textData = {
    d: {
      k: [{
        t: 0,
        s: {
          s: fontSize,
          f: fontName,
          t: dom.innerHTML,
          j: 0,
          tr: 0,
          lh: fontAscent,
          ls: 0,
          fc: fontColor
        }
      }]
    },
    p: {},
    m: {},
    a: []
  };
  var fontDef = {
    origin: 0,
    fPath: '',
    fClass: '',
    fFamily: fontFamily,
    fWeight: '',
    fStyle: fontStyle,
    fName: fontName,
    ascent: fontAscent
  };
  return [textData, fontDef];
}

function renderImage(dom) {
  var id = (0, _v["default"])();
  var domHeightVal = dom.height.baseVal;
  domHeightVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
  var domWidthVal = dom.width.baseVal;
  domWidthVal.convertToSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PX);
  var canvas = document.createElement('canvas');
  var ctx = canvas.getContext('2d');
  canvas.width = domWidthVal.valueInSpecifiedUnits;
  canvas.height = domHeightVal.valueInSpecifiedUnits;
  ctx.drawImage(dom, 0, 0);
  var dataUrl = canvas.toDataURL();
  var asset = {
    h: domHeightVal.valueInSpecifiedUnits,
    w: domWidthVal.valueInSpecifiedUnits,
    id: (0, _v["default"])(),
    u: dataUrl,
    e: 1
  };
  return [id, asset];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZW5kZXIudHMiXSwibmFtZXMiOlsicmVuZGVyIiwiZG9tIiwiU1ZHVGV4dEVsZW1lbnQiLCJTVkdJbWFnZUVsZW1lbnQiLCJTVkdHRWxlbWVudCIsInJlbmRlckdyb3VwIiwicmVuZGVyR2x5cGgiLCJlbmNvZGVMaW5lQ2FwIiwidHlwZSIsImVuY29kZUxpbmVKb2luIiwiYWRkVmlzdWFsRW5jb2RpbmdzIiwiaXRlbXMiLCJzdHlsZXMiLCJzdHJva2UiLCJwdXNoIiwidHkiLCJjIiwiayIsInNwbGl0Iiwic2xpY2UiLCJtYXAiLCJyYXciLCJwYXJzZUludCIsImNvbmNhdCIsIm8iLCJwYXJzZUZsb2F0Iiwic3Ryb2tlT3BhY2l0eSIsInciLCJzdHJva2VXaWR0aCIsImxjIiwic3Ryb2tlTGluZWNhcCIsImxqIiwic3Ryb2tlTGluZWpvaW4iLCJmaWxsIiwiZmlsbE9wYWNpdHkiLCJwIiwiYSIsInMiLCJyIiwic2siLCJzYSIsImdyb3VwIiwiaXQiLCJibSIsImhkIiwicG9zdEFjdGlvbnMiLCJwYXRoTWFrZXIiLCJ1bmlmb3JtIiwia3MiLCJwYXRoIiwibm0iLCJpZCIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJTVkdDaXJjbGVFbGVtZW50Iiwic3ZnTGVuZ3RoIiwiYmFzZVZhbCIsImNvbnZlcnRUb1NwZWNpZmllZFVuaXRzIiwiU1ZHTGVuZ3RoIiwiU1ZHX0xFTkdUSFRZUEVfUFgiLCJ2YWx1ZUluU3BlY2lmaWVkVW5pdHMiLCJQYXRoTWFrZXIiLCJtb3ZlVG8iLCJhcmNUbyIsImNsb3NlUGF0aCIsIlNWR0VsbGlwc2VFbGVtZW50IiwibWFwS2V5Iiwia2V5IiwicngiLCJyeSIsIlNWR0xpbmVFbGVtZW50IiwieDEiLCJ4MiIsInkxIiwieTIiLCJvZmZzZXRYIiwiTWF0aCIsIm1pbiIsIm9mZnNldFkiLCJsaW5lVG8iLCJTVkdQYXRoRWxlbWVudCIsInBhdGhEYXRhIiwiZ2V0QXR0cmlidXRlIiwicGF0aERhdGFTZXJpZXMiLCJwYXRoRGF0YVdpdGhUeXBlIiwiZm9yRWFjaCIsInBhdGhEYXRhSXRlbSIsImNvZGUiLCJ4IiwieSIsImxpbmVUb1JlbGF0aXZlIiwiaG9yaXpvbnRhbFRvIiwiaG9yaXpvbnRhbFRvUmVsYXRpdmUiLCJ2ZXJ0aWNhbFRvIiwidmVydGljYWxUb1JlbGF0aXZlIiwiY3ViaWNCZXppZXJDdXJ2ZVRvIiwiY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUiLCJxdWFkcmF0aWNCZXppZXJDdXJ2ZVRvIiwicXVhZHJhdGljQmV6aWVyQ3VydmVUb1JlbGF0aXZlIiwieEF4aXNSb3RhdGlvbiIsImxhcmdlQXJjIiwic3dlZXAiLCJhcmNUb1JlbGF0aXZlIiwiY29uc29sZSIsImVycm9yIiwiRXJyb3IiLCJTVkdQb2x5Z29uRWxlbWVudCIsIlNWR1BvbHlsaW5lRWxlbWVudCIsInBvaW50cyIsImxlbmd0aCIsIml0ZXJhYmxlUG9pbnRzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJjYWxsIiwicmVkdWNlIiwidiIsImkiLCJTVkdSZWN0RWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY2hpbGROb2RlcyIsIm5vZGUiLCJTVkdHcmFwaGljc0VsZW1lbnQiLCJjaGlsZCIsInJlbmRlclRleHQiLCJjb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJmb250RmFtaWx5IiwidHJpbSIsImZvbnRTdHlsZSIsImZvbnROYW1lIiwiZm9udEFzY2VudCIsImxpbmVIZWlnaHQiLCJmb250Q29sb3IiLCJjb2xvciIsInRleHREYXRhIiwiZCIsInQiLCJmIiwiaW5uZXJIVE1MIiwiaiIsInRyIiwibGgiLCJscyIsImZjIiwibSIsImZvbnREZWYiLCJvcmlnaW4iLCJmUGF0aCIsImZDbGFzcyIsImZGYW1pbHkiLCJmV2VpZ2h0IiwiZlN0eWxlIiwiZk5hbWUiLCJhc2NlbnQiLCJyZW5kZXJJbWFnZSIsImRvbUhlaWdodFZhbCIsImRvbVdpZHRoVmFsIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29u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O0FBRVZqQyxJQUFBQSxDQUFDLEVBQUVrSSxXQUFXLENBQUNqRyxxQkFGTDtBQUdWVCxJQUFBQSxFQUFFLEVBQUUsb0JBSE07QUFJVnFILElBQUFBLENBQUMsRUFBRUosT0FKTztBQUtWSyxJQUFBQSxDQUFDLEVBQUU7QUFMTyxHQUFkO0FBT0EsU0FBTyxDQUFDdEgsRUFBRCxFQUFLbUgsS0FBTCxDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcm91cFNoYXBlLCBUZXh0RGF0YSwgUmVmZXJlbmNlSUQsIFBhdGhTaGFwZSwgRmlsbFNoYXBlLCBTdHJva2VTaGFwZSwgVHJhbnNmb3JtU2hhcGUsIEltYWdlQXNzZXQsIEZvbnQxIH0gZnJvbSAnLi9hbmltYXRpb24nXG5pbXBvcnQgeyBQYXRoTWFrZXIgfSBmcm9tICcuL3BhdGgnXG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkL3Y0J1xuaW1wb3J0IHsgcGFyc2VTVkcsIE1vdmVUb0NvbW1hbmQsIExpbmVUb0NvbW1hbmQsIEhvcml6b250YWxMaW5lVG9Db21tYW5kLCBWZXJ0aWNhbExpbmVUb0NvbW1hbmQsIEN1cnZlVG9Db21tYW5kLCBRdWFkcmF0aWNDdXJ2ZVRvQ29tbWFuZCwgRWxsaXB0aWNhbEFyY0NvbW1hbmQgfSBmcm9tICdzdmctcGF0aC1wYXJzZXInXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihkb206IFNWR0dyYXBoaWNzRWxlbWVudCk6IEdyb3VwU2hhcGUge1xuICAgIGlmIChkb20gaW5zdGFuY2VvZiBTVkdUZXh0RWxlbWVudCB8fCBkb20gaW5zdGFuY2VvZiBTVkdJbWFnZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHt9XG4gICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdHRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gcmVuZGVyR3JvdXAoZG9tKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZW5kZXJHbHlwaChkb20pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGVMaW5lQ2FwKHR5cGU/OiBzdHJpbmcgfCBudWxsKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3F1YXJlJzpcbiAgICAgICAgICAgIHJldHVybiAzXG4gICAgICAgIGNhc2UgJ2J1dHQnOlxuICAgICAgICAgICAgcmV0dXJuIDFcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAyXG4gICAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGVMaW5lSm9pbih0eXBlPzogc3RyaW5nIHwgbnVsbCk6IG51bWJlciB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ21pdGVyJzpcbiAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIGNhc2UgJ2JldmVsJzpcbiAgICAgICAgICAgIHJldHVybiAzXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gMlxuICAgIH1cbn1cblxudHlwZSBWaXN1YWxHcm91cEl0ZW0gPSBQYXRoU2hhcGUgfCBGaWxsU2hhcGUgfCBTdHJva2VTaGFwZSB8IFRyYW5zZm9ybVNoYXBlXG5cbmZ1bmN0aW9uIGFkZFZpc3VhbEVuY29kaW5ncyhpdGVtczogVmlzdWFsR3JvdXBJdGVtW10sIHN0eWxlczogQ1NTU3R5bGVEZWNsYXJhdGlvbikge1xuICAgIGlmIChzdHlsZXMuc3Ryb2tlICYmIHN0eWxlcy5zdHJva2UgIT09ICdub25lJykge1xuICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgIHR5OiAnc3QnLFxuICAgICAgICAgICAgYzoge1xuICAgICAgICAgICAgICAgIGs6IHN0eWxlcy5zdHJva2UhLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpLnNsaWNlKDAsIDMpLm1hcCgocmF3OiBzdHJpbmcpID0+IHBhcnNlSW50KHJhdykgLyAyNTUpLmNvbmNhdCgxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5zdHJva2VPcGFjaXR5IHx8ICcxJykgKiAxMDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB3OiB7XG4gICAgICAgICAgICAgICAgazogcGFyc2VGbG9hdChzdHlsZXMuc3Ryb2tlV2lkdGggfHwgJzEnKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxjOiBlbmNvZGVMaW5lQ2FwKHN0eWxlcy5zdHJva2VMaW5lY2FwKSxcbiAgICAgICAgICAgIGxqOiBlbmNvZGVMaW5lSm9pbihzdHlsZXMuc3Ryb2tlTGluZWpvaW4pXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGlmIChzdHlsZXMuZmlsbCAmJiBzdHlsZXMuZmlsbCAhPT0gJ25vbmUnKSB7XG4gICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgdHk6ICdmbCcsXG4gICAgICAgICAgICBjOiB7XG4gICAgICAgICAgICAgICAgazogc3R5bGVzLmZpbGwhLnNwbGl0KCcoJylbMV0uc3BsaXQoJyknKVswXS5zcGxpdCgnLCcpLnNsaWNlKDAsIDMpLm1hcCgocmF3OiBzdHJpbmcpID0+IHBhcnNlSW50KHJhdykgLyAyNTUpLmNvbmNhdCgxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICBrOiBwYXJzZUZsb2F0KHN0eWxlcy5maWxsT3BhY2l0eSB8fCAnMScpICogMTAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICB0eTogXCJ0clwiLFxuICAgICAgICBwOiB7XG4gICAgICAgICAgICBrOiBbXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIGE6IHtcbiAgICAgICAgICAgIGs6IFtcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgczoge1xuICAgICAgICAgICAgazogW1xuICAgICAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgICAgICAxMDBcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSxcbiAgICAgICAgcjoge1xuICAgICAgICAgICAgazogMFxuICAgICAgICB9LFxuICAgICAgICBvOiB7XG4gICAgICAgICAgICBrOiAxMDBcbiAgICAgICAgfSxcbiAgICAgICAgc2s6IHtcbiAgICAgICAgICAgIGs6IDBcbiAgICAgICAgfSxcbiAgICAgICAgc2E6IHtcbiAgICAgICAgICAgIGs6IDBcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHJlbmRlckdseXBoKGRvbTogU1ZHR3JhcGhpY3NFbGVtZW50KTogR3JvdXBTaGFwZSB7XG4gICAgY29uc3QgZ3JvdXA6IEdyb3VwU2hhcGUgPSB7XG4gICAgICAgIHR5OiBcImdyXCIsXG4gICAgICAgIGl0OiBbXSxcbiAgICAgICAgYm06IDAsXG4gICAgICAgIGhkOiBmYWxzZVxuICAgIH1cbiAgICBjb25zdCBwb3N0QWN0aW9ucyA9IChwYXRoTWFrZXI6IFBhdGhNYWtlcikgPT4ge1xuICAgICAgICBwYXRoTWFrZXIudW5pZm9ybSgpXG4gICAgICAgIGdyb3VwLml0IS5wdXNoKHtcbiAgICAgICAgICAgIHR5OiAnc2gnLFxuICAgICAgICAgICAga3M6IHtcbiAgICAgICAgICAgICAgICBrOiBwYXRoTWFrZXIucGF0aCxcbiAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm06IGRvbS5pZCxcbiAgICAgICAgICAgIGhkOiBmYWxzZVxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb20pXG4gICAgICAgIGFkZFZpc3VhbEVuY29kaW5ncyhncm91cC5pdCEgYXMgVmlzdWFsR3JvdXBJdGVtW10sIHN0eWxlcylcbiAgICB9XG4gICAgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR0NpcmNsZUVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc3ZnTGVuZ3RoID0gZG9tLnIuYmFzZVZhbFxuICAgICAgICBzdmdMZW5ndGguY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKVxuICAgICAgICBjb25zdCByID0gc3ZnTGVuZ3RoLnZhbHVlSW5TcGVjaWZpZWRVbml0c1xuICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcbiAgICAgICAgcGF0aE1ha2VyLm1vdmVUbyhyLCAwKVxuICAgICAgICBwYXRoTWFrZXIuYXJjVG8ociwgciwgMCwgMSwgMCwgciwgMiAqIHIpXG4gICAgICAgIHBhdGhNYWtlci5hcmNUbyhyLCByLCAwLCAxLCAwLCByLCAwKVxuICAgICAgICBwYXRoTWFrZXIuY2xvc2VQYXRoKClcbiAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHRWxsaXBzZUVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbWFwS2V5OiAoJ3J4JyB8ICdyeScpW10gPSBbJ3J4JywgJ3J5J11cbiAgICAgICAgY29uc3QgW3J4LCByeV0gPSBtYXBLZXkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdmdMZW5ndGggPSBkb21ba2V5XS5iYXNlVmFsXG4gICAgICAgICAgICBzdmdMZW5ndGguY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKVxuICAgICAgICAgICAgcmV0dXJuIHN2Z0xlbmd0aC52YWx1ZUluU3BlY2lmaWVkVW5pdHNcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3QgcGF0aE1ha2VyID0gbmV3IFBhdGhNYWtlcigpXG4gICAgICAgIHBhdGhNYWtlci5tb3ZlVG8ocngsIDApXG4gICAgICAgIHBhdGhNYWtlci5hcmNUbyhyeCwgcnksIDAsIDEsIDAsIHJ4LCAyICogcnkpXG4gICAgICAgIHBhdGhNYWtlci5hcmNUbyhyeCwgcnksIDAsIDEsIDAsIHJ4LCAwKVxuICAgICAgICBwYXRoTWFrZXIuY2xvc2VQYXRoKClcbiAgICAgICAgcG9zdEFjdGlvbnMocGF0aE1ha2VyKVxuICAgIH0gZWxzZSBpZiAoZG9tIGluc3RhbmNlb2YgU1ZHTGluZUVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgbWFwS2V5OiAoJ3gxJyB8ICd4MicgfCAneTEnIHwgJ3kyJylbXSA9IFsneDEnLCAneDInLCAneTEnLCAneTInXVxuICAgICAgICBjb25zdCBbeDEsIHgyLCB5MSwgeTJdID0gbWFwS2V5Lm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbFxuICAgICAgICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICAgICAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLm1pbih4MSwgeDIpXG4gICAgICAgIGNvbnN0IG9mZnNldFkgPSBNYXRoLm1pbih5MSwgeTIpXG4gICAgICAgIGNvbnN0IHBhdGhNYWtlciA9IG5ldyBQYXRoTWFrZXIoKVxuICAgICAgICBwYXRoTWFrZXIubW92ZVRvKHgxIC0gb2Zmc2V0WCwgeTEgLSBvZmZzZXRZKVxuICAgICAgICBwYXRoTWFrZXIubGluZVRvKHgyIC0gb2Zmc2V0WCwgeTIgLSBvZmZzZXRZKVxuICAgICAgICBwb3N0QWN0aW9ucyhwYXRoTWFrZXIpXG4gICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdQYXRoRWxlbWVudCkge1xuICAgICAgICBjb25zdCBwYXRoRGF0YSA9IGRvbS5nZXRBdHRyaWJ1dGUoJ2QnKSB8fCAnJ1xuICAgICAgICBjb25zdCBwYXRoRGF0YVNlcmllcyA9IHBhcnNlU1ZHKHBhdGhEYXRhKVxuICAgICAgICBjb25zdCBwYXRoTWFrZXIgPSBuZXcgUGF0aE1ha2VyKClcbiAgICAgICAgbGV0IHBhdGhEYXRhV2l0aFR5cGU7XG4gICAgICAgIHBhdGhEYXRhU2VyaWVzLmZvckVhY2gocGF0aERhdGFJdGVtID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAocGF0aERhdGFJdGVtLmNvZGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBNb3ZlVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5tb3ZlVG8ocGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgTGluZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIubGluZVRvKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIExpbmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmxpbmVUb1JlbGF0aXZlKHBhdGhEYXRhV2l0aFR5cGUueCwgcGF0aERhdGFXaXRoVHlwZS55KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEhvcml6b250YWxMaW5lVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5ob3Jpem9udGFsVG8ocGF0aERhdGFXaXRoVHlwZS54KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBwYXRoRGF0YVdpdGhUeXBlID0gcGF0aERhdGFJdGVtIGFzIEhvcml6b250YWxMaW5lVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5ob3Jpem9udGFsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnVic6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgVmVydGljYWxMaW5lVG9Db21tYW5kXG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci52ZXJ0aWNhbFRvKHBhdGhEYXRhV2l0aFR5cGUueSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBWZXJ0aWNhbExpbmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnZlcnRpY2FsVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgQ3VydmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmN1YmljQmV6aWVyQ3VydmVUbyhwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngyLCBwYXRoRGF0YVdpdGhUeXBlLnkyLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBDdXJ2ZVRvQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuY3ViaWNCZXppZXJDdXJ2ZVRvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54MiwgcGF0aERhdGFXaXRoVHlwZS55MiwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgUXVhZHJhdGljQ3VydmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnF1YWRyYXRpY0JlemllckN1cnZlVG8ocGF0aERhdGFXaXRoVHlwZS54MSwgcGF0aERhdGFXaXRoVHlwZS55MSwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAncSc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgUXVhZHJhdGljQ3VydmVUb0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLnF1YWRyYXRpY0JlemllckN1cnZlVG9SZWxhdGl2ZShwYXRoRGF0YVdpdGhUeXBlLngxLCBwYXRoRGF0YVdpdGhUeXBlLnkxLCBwYXRoRGF0YVdpdGhUeXBlLngsIHBhdGhEYXRhV2l0aFR5cGUueSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICAgICAgcGF0aERhdGFXaXRoVHlwZSA9IHBhdGhEYXRhSXRlbSBhcyBFbGxpcHRpY2FsQXJjQ29tbWFuZFxuICAgICAgICAgICAgICAgICAgICBwYXRoTWFrZXIuYXJjVG8ocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhEYXRhV2l0aFR5cGUgPSBwYXRoRGF0YUl0ZW0gYXMgRWxsaXB0aWNhbEFyY0NvbW1hbmRcbiAgICAgICAgICAgICAgICAgICAgcGF0aE1ha2VyLmFyY1RvUmVsYXRpdmUocGF0aERhdGFXaXRoVHlwZS5yeCwgcGF0aERhdGFXaXRoVHlwZS5yeSwgcGF0aERhdGFXaXRoVHlwZS54QXhpc1JvdGF0aW9uLCB+fnBhdGhEYXRhV2l0aFR5cGUubGFyZ2VBcmMsIH5+cGF0aERhdGFXaXRoVHlwZS5zd2VlcCwgcGF0aERhdGFXaXRoVHlwZS54LCBwYXRoRGF0YVdpdGhUeXBlLnkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSAnWic6XG4gICAgICAgICAgICAgICAgY2FzZSAneic6XG4gICAgICAgICAgICAgICAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocGF0aERhdGFJdGVtKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGltcGxlbWVudGF0aW9uIGZvdW5kIGZvciB0aGlzIHBhdGggY29tbWFuZC4nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBwb3N0QWN0aW9ucyhwYXRoTWFrZXIpXG4gICAgfSBlbHNlIGlmIChkb20gaW5zdGFuY2VvZiBTVkdQb2x5Z29uRWxlbWVudCB8fCBkb20gaW5zdGFuY2VvZiBTVkdQb2x5bGluZUVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gZG9tLnBvaW50c1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgaXRlcmFibGVQb2ludHM6IERPTVBvaW50W10gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChwb2ludHMpXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gaXRlcmFibGVQb2ludHMucmVkdWNlKChwLCB2KSA9PiBNYXRoLm1pbihwLCB2LngpLCAwKVxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGl0ZXJhYmxlUG9pbnRzLnJlZHVjZSgocCwgdikgPT4gTWF0aC5taW4ocCwgdi55KSwgMClcbiAgICAgICAgICAgIGNvbnN0IHBhdGhNYWtlciA9IG5ldyBQYXRoTWFrZXIoKVxuICAgICAgICAgICAgcGF0aE1ha2VyLm1vdmVUbyhwb2ludHNbMF0ueCAtIG9mZnNldFgsIHBvaW50c1swXS55IC0gb2Zmc2V0WSlcbiAgICAgICAgICAgIGl0ZXJhYmxlUG9pbnRzLmZvckVhY2goKHYsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaSA8PSAwKSByZXR1cm5cbiAgICAgICAgICAgICAgICBwYXRoTWFrZXIubGluZVRvKHYueCAtIG9mZnNldFgsIHYueSAtIG9mZnNldFkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1BvbHlnb25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcGF0aE1ha2VyLmNsb3NlUGF0aCgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3N0QWN0aW9ucyhwYXRoTWFrZXIpXG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRvbSBpbnN0YW5jZW9mIFNWR1JlY3RFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEtleTogKCd3aWR0aCcgfCAnaGVpZ2h0JylbXSA9IFsnd2lkdGgnLCAnaGVpZ2h0J11cbiAgICAgICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gbWFwS2V5Lm1hcChrZXkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3ZnTGVuZ3RoID0gZG9tW2tleV0uYmFzZVZhbFxuICAgICAgICAgICAgc3ZnTGVuZ3RoLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICAgICAgICAgIHJldHVybiBzdmdMZW5ndGgudmFsdWVJblNwZWNpZmllZFVuaXRzXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHBhdGhNYWtlciA9IG5ldyBQYXRoTWFrZXIoKVxuICAgICAgICBwYXRoTWFrZXIubW92ZVRvKDAsIDApXG4gICAgICAgIHBhdGhNYWtlci5saW5lVG8od2lkdGgsIDApXG4gICAgICAgIHBhdGhNYWtlci5saW5lVG8od2lkdGgsIGhlaWdodClcbiAgICAgICAgcGF0aE1ha2VyLmxpbmVUbygwLCBoZWlnaHQpXG4gICAgICAgIHBhdGhNYWtlci5jbG9zZVBhdGgoKVxuICAgICAgICBwb3N0QWN0aW9ucyhwYXRoTWFrZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihkb20pXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW1wbGVtZW50YXRpb24gZm91bmQgZm9yIHN2ZyBncmFwaGljcyBlbGVtZW50LicpXG4gICAgfVxuICAgIHJldHVybiBncm91cFxufVxuXG5mdW5jdGlvbiByZW5kZXJHcm91cChkb206IFNWR0dFbGVtZW50KTogR3JvdXBTaGFwZSB7XG4gICAgbGV0IGdyb3VwOiBHcm91cFNoYXBlID0ge1xuICAgICAgICB0eTogJ2dyJyxcbiAgICAgICAgaXQ6IFtdLFxuICAgICAgICBubTogZG9tLmlkLFxuICAgICAgICBibTogMCxcbiAgICAgICAgaGQ6IGZhbHNlXG4gICAgfVxuICAgIGRvbS5jaGlsZE5vZGVzLmZvckVhY2gobm9kZSA9PiB7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgU1ZHR3JhcGhpY3NFbGVtZW50KSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSByZW5kZXIobm9kZSlcbiAgICAgICAgICAgIGlmIChjaGlsZC50eSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLml0IS5wdXNoKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZ3JvdXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRleHQoZG9tOiBTVkdUZXh0RWxlbWVudCk6IFtUZXh0RGF0YSwgRm9udDFdIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShkb20pXG4gICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZm9udFNpemUpLFxuICAgICAgICBmb250RmFtaWx5ID0gY29tcHV0ZWRTdHlsZS5mb250RmFtaWx5LnNwbGl0KCcsJylbMF0udHJpbSgpLFxuICAgICAgICBmb250U3R5bGUgPSBjb21wdXRlZFN0eWxlLmZvbnRTdHlsZSxcbiAgICAgICAgZm9udE5hbWUgPSBgJHtmb250RmFtaWx5fS0ke2ZvbnRTdHlsZX1gLFxuICAgICAgICBmb250QXNjZW50ID0gcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlLmxpbmVIZWlnaHQgfHwgYCR7Zm9udFNpemV9YCksXG4gICAgICAgIGZvbnRDb2xvciA9IChjb21wdXRlZFN0eWxlLmNvbG9yIHx8ICdyZ2IoMCwwLDApJykuc3BsaXQoJygnKVsxXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsJykubWFwKGkgPT4gcGFyc2VJbnQoaSkgLyAyNTUpXG4gICAgY29uc3QgdGV4dERhdGE6IFRleHREYXRhID0ge1xuICAgICAgICBkOiB7XG4gICAgICAgICAgICBrOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0OiAwLFxuICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzOiBmb250U2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGY6IGZvbnROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdDogZG9tLmlubmVySFRNTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGo6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxoOiBmb250QXNjZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgbHM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmYzogZm9udENvbG9yXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHA6IHt9LFxuICAgICAgICBtOiB7fSxcbiAgICAgICAgYTogW11cbiAgICB9XG4gICAgY29uc3QgZm9udERlZjogRm9udDEgPSB7XG4gICAgICAgIG9yaWdpbjogMCxcbiAgICAgICAgZlBhdGg6ICcnLFxuICAgICAgICBmQ2xhc3M6ICcnLFxuICAgICAgICBmRmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgICBmV2VpZ2h0OiAnJyxcbiAgICAgICAgZlN0eWxlOiBmb250U3R5bGUsXG4gICAgICAgIGZOYW1lOiBmb250TmFtZSxcbiAgICAgICAgYXNjZW50OiBmb250QXNjZW50XG4gICAgfVxuICAgIHJldHVybiBbdGV4dERhdGEsIGZvbnREZWZdXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJJbWFnZShkb206IFNWR0ltYWdlRWxlbWVudCk6IFtSZWZlcmVuY2VJRCwgSW1hZ2VBc3NldF0ge1xuICAgIGNvbnN0IGlkID0gdXVpZCgpXG4gICAgY29uc3QgZG9tSGVpZ2h0VmFsID0gZG9tLmhlaWdodC5iYXNlVmFsXG4gICAgZG9tSGVpZ2h0VmFsLmNvbnZlcnRUb1NwZWNpZmllZFVuaXRzKFNWR0xlbmd0aC5TVkdfTEVOR1RIVFlQRV9QWClcbiAgICBjb25zdCBkb21XaWR0aFZhbCA9IGRvbS53aWR0aC5iYXNlVmFsXG4gICAgZG9tV2lkdGhWYWwuY29udmVydFRvU3BlY2lmaWVkVW5pdHMoU1ZHTGVuZ3RoLlNWR19MRU5HVEhUWVBFX1BYKVxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcblxuICAgIGNhbnZhcy53aWR0aCA9IGRvbVdpZHRoVmFsLnZhbHVlSW5TcGVjaWZpZWRVbml0c1xuICAgIGNhbnZhcy5oZWlnaHQgPSBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzXG4gICAgY3R4IS5kcmF3SW1hZ2UoZG9tLCAwLCAwKVxuXG4gICAgY29uc3QgZGF0YVVybCA9IGNhbnZhcy50b0RhdGFVUkwoKVxuICAgIGNvbnN0IGFzc2V0ID0ge1xuICAgICAgICBoOiBkb21IZWlnaHRWYWwudmFsdWVJblNwZWNpZmllZFVuaXRzLFxuICAgICAgICB3OiBkb21XaWR0aFZhbC52YWx1ZUluU3BlY2lmaWVkVW5pdHMsXG4gICAgICAgIGlkOiB1dWlkKCksXG4gICAgICAgIHU6IGRhdGFVcmwsXG4gICAgICAgIGU6IDFcbiAgICB9XG4gICAgcmV0dXJuIFtpZCwgYXNzZXRdXG59Il19